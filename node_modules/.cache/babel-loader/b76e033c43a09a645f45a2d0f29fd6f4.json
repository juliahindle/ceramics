{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\n\nvar gtoken_1 = require(\"gtoken\");\n\nvar jwtaccess_1 = require(\"./jwtaccess\");\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar JWT = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(JWT, _oauth2client_1$OAuth);\n\n  var _super = _createSuper(JWT);\n\n  function JWT(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    var _this;\n\n    _classCallCheck(this, JWT);\n\n    var opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile: keyFile,\n      key: key,\n      keyId: keyId,\n      scopes: scopes,\n      subject: subject\n    };\n    _this = _super.call(this, {\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n      forceRefreshOnFailure: opts.forceRefreshOnFailure\n    });\n    _this.email = opts.email;\n    _this.keyFile = opts.keyFile;\n    _this.key = opts.key;\n    _this.keyId = opts.keyId;\n    _this.scopes = opts.scopes;\n    _this.subject = opts.subject;\n    _this.additionalClaims = opts.additionalClaims;\n    _this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n    return _this;\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n\n\n  _createClass(JWT, [{\n    key: \"createScoped\",\n    value: function createScoped(scopes) {\n      return new JWT({\n        email: this.email,\n        keyFile: this.keyFile,\n        key: this.key,\n        keyId: this.keyId,\n        scopes: scopes,\n        subject: this.subject,\n        additionalClaims: this.additionalClaims\n      });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n\n  }, {\n    key: \"getRequestMetadataAsync\",\n    value: function () {\n      var _getRequestMetadataAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n        var _yield$this$refreshTo, tokens, headers;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.apiKey && !this.hasUserScopes() && url)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                if (!(this.additionalClaims && this.additionalClaims.target_audience)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.refreshToken();\n\n              case 4:\n                _yield$this$refreshTo = _context.sent;\n                tokens = _yield$this$refreshTo.tokens;\n                return _context.abrupt(\"return\", {\n                  headers: this.addSharedMetadataHeaders({\n                    Authorization: \"Bearer \".concat(tokens.id_token)\n                  })\n                });\n\n              case 9:\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                  this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n\n                _context.next = 12;\n                return this.access.getRequestHeaders(url, this.additionalClaims);\n\n              case 12:\n                headers = _context.sent;\n                return _context.abrupt(\"return\", {\n                  headers: this.addSharedMetadataHeaders(headers)\n                });\n\n              case 14:\n                _context.next = 21;\n                break;\n\n              case 16:\n                if (!(this.hasAnyScopes() || this.apiKey)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(JWT.prototype), \"getRequestMetadataAsync\", this).call(this, url));\n\n              case 20:\n                return _context.abrupt(\"return\", {\n                  headers: {}\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRequestMetadataAsync(_x) {\n        return _getRequestMetadataAsync.apply(this, arguments);\n      }\n\n      return getRequestMetadataAsync;\n    }()\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n\n  }, {\n    key: \"fetchIdToken\",\n    value: function () {\n      var _fetchIdToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(targetAudience) {\n        var gtoken;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Create a new gToken for fetching an ID token\n                gtoken = new gtoken_1.GoogleToken({\n                  iss: this.email,\n                  sub: this.subject,\n                  scope: this.scopes || this.defaultScopes,\n                  keyFile: this.keyFile,\n                  key: this.key,\n                  additionalClaims: {\n                    target_audience: targetAudience\n                  }\n                });\n                _context2.next = 3;\n                return gtoken.getToken({\n                  forceRefresh: true\n                });\n\n              case 3:\n                if (gtoken.idToken) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('Unknown error: Failed to fetch ID token');\n\n              case 5:\n                return _context2.abrupt(\"return\", gtoken.idToken);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchIdToken(_x2) {\n        return _fetchIdToken.apply(this, arguments);\n      }\n\n      return fetchIdToken;\n    }()\n    /**\n     * Determine if there are currently scopes available.\n     */\n\n  }, {\n    key: \"hasUserScopes\",\n    value: function hasUserScopes() {\n      if (!this.scopes) {\n        return false;\n      }\n\n      return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n\n  }, {\n    key: \"hasAnyScopes\",\n    value: function hasAnyScopes() {\n      if (this.scopes && this.scopes.length > 0) return true;\n      if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n      return false;\n    }\n  }, {\n    key: \"authorize\",\n    value: function authorize(callback) {\n      if (callback) {\n        this.authorizeAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.authorizeAsync();\n      }\n    }\n  }, {\n    key: \"authorizeAsync\",\n    value: function () {\n      var _authorizeAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.refreshToken();\n\n              case 2:\n                result = _context3.sent;\n\n                if (result) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('No result returned');\n\n              case 5:\n                this.credentials = result.tokens;\n                this.credentials.refresh_token = 'jwt-placeholder';\n                this.key = this.gtoken.key;\n                this.email = this.gtoken.iss;\n                return _context3.abrupt(\"return\", result.tokens);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function authorizeAsync() {\n        return _authorizeAsync.apply(this, arguments);\n      }\n\n      return authorizeAsync;\n    }()\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n\n  }, {\n    key: \"refreshTokenNoCache\",\n    value: function () {\n      var _refreshTokenNoCache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      refreshToken) {\n        var gtoken, token, tokens;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                gtoken = this.createGToken();\n                _context4.next = 3;\n                return gtoken.getToken({\n                  forceRefresh: this.isTokenExpiring()\n                });\n\n              case 3:\n                token = _context4.sent;\n                tokens = {\n                  access_token: token.access_token,\n                  token_type: 'Bearer',\n                  expiry_date: gtoken.expiresAt,\n                  id_token: gtoken.idToken\n                };\n                this.emit('tokens', tokens);\n                return _context4.abrupt(\"return\", {\n                  res: null,\n                  tokens: tokens\n                });\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function refreshTokenNoCache(_x3) {\n        return _refreshTokenNoCache.apply(this, arguments);\n      }\n\n      return refreshTokenNoCache;\n    }()\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n\n  }, {\n    key: \"createGToken\",\n    value: function createGToken() {\n      if (!this.gtoken) {\n        this.gtoken = new gtoken_1.GoogleToken({\n          iss: this.email,\n          sub: this.subject,\n          scope: this.scopes || this.defaultScopes,\n          keyFile: this.keyFile,\n          key: this.key,\n          additionalClaims: this.additionalClaims\n        });\n      }\n\n      return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the service account auth settings.');\n      }\n\n      if (!json.client_email) {\n        throw new Error('The incoming JSON object does not contain a client_email field');\n      }\n\n      if (!json.private_key) {\n        throw new Error('The incoming JSON object does not contain a private_key field');\n      } // Extract the relevant information from the json key file.\n\n\n      this.email = json.client_email;\n      this.key = json.private_key;\n      this.keyId = json.private_key_id;\n      this.projectId = json.project_id;\n      this.quotaProjectId = json.quota_project_id;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream, callback) {\n      if (callback) {\n        this.fromStreamAsync(inputStream).then(function () {\n          return callback();\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the service account auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n\n            _this2.fromJSON(data);\n\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey) {\n      if (typeof apiKey !== 'string') {\n        throw new Error('Must provide an API Key string.');\n      }\n\n      this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n\n  }, {\n    key: \"getCredentials\",\n    value: function () {\n      var _getCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var gtoken, creds;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!this.key) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  private_key: this.key,\n                  client_email: this.email\n                });\n\n              case 4:\n                if (!this.keyFile) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                gtoken = this.createGToken();\n                _context5.next = 8;\n                return gtoken.getCredentials(this.keyFile);\n\n              case 8:\n                creds = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  private_key: creds.privateKey,\n                  client_email: creds.clientEmail\n                });\n\n              case 10:\n                throw new Error('A key or a keyFile must be provided to getCredentials.');\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getCredentials() {\n        return _getCredentials.apply(this, arguments);\n      }\n\n      return getCredentials;\n    }()\n  }]);\n\n  return JWT;\n}(oauth2client_1.OAuth2Client);\n\nexports.JWT = JWT;","map":{"version":3,"names":["Object","defineProperty","exports","value","JWT","gtoken_1","require","jwtaccess_1","oauth2client_1","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","forceRefreshOnFailure","additionalClaims","credentials","refresh_token","expiry_date","url","apiKey","hasUserScopes","target_audience","refreshToken","tokens","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","getRequestHeaders","hasAnyScopes","targetAudience","gtoken","GoogleToken","iss","sub","scope","defaultScopes","getToken","forceRefresh","idToken","Error","length","callback","authorizeAsync","then","r","result","createGToken","isTokenExpiring","token","access_token","token_type","expiresAt","emit","res","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","fromJSON","e","getCredentials","creds","privateKey","clientEmail","OAuth2Client"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({\n            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n            forceRefreshOnFailure: opts.forceRefreshOnFailure,\n        });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        if (!this.apiKey && !this.hasUserScopes() && url) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`,\n                    }),\n                };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                const headers = await this.access.getRequestHeaders(url, this.additionalClaims);\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        }\n        else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return { headers: {} };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: { target_audience: targetAudience },\n        });\n        await gtoken.getToken({\n            forceRefresh: true,\n        });\n        if (!gtoken.idToken) {\n            throw new Error('Unknown error: Failed to fetch ID token');\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n    hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0)\n            return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0)\n            return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring(),\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n//# sourceMappingURL=jwtclient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}