{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Compute = void 0;\n\nvar arrify = require(\"arrify\");\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar Compute = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(Compute, _oauth2client_1$OAuth);\n\n  var _super = _createSuper(Compute);\n\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  function Compute() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Compute);\n\n    _this = _super.call(this, options); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    _this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    _this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    _this.scopes = arrify(options.scopes);\n    return _this;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  _createClass(Compute, [{\n    key: \"refreshTokenNoCache\",\n    value: function () {\n      var _refreshTokenNoCache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      refreshToken) {\n        var tokenPath, data, instanceOptions, tokens;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tokenPath = \"service-accounts/\".concat(this.serviceAccountEmail, \"/token\");\n                _context.prev = 1;\n                instanceOptions = {\n                  property: tokenPath\n                };\n\n                if (this.scopes.length > 0) {\n                  instanceOptions.params = {\n                    scopes: this.scopes.join(',')\n                  };\n                }\n\n                _context.next = 6;\n                return gcpMetadata.instance(instanceOptions);\n\n              case 6:\n                data = _context.sent;\n                _context.next = 14;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                _context.t0.message = \"Could not refresh access token: \".concat(_context.t0.message);\n                this.wrapError(_context.t0);\n                throw _context.t0;\n\n              case 14:\n                tokens = data;\n\n                if (data && data.expires_in) {\n                  tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n                  delete tokens.expires_in;\n                }\n\n                this.emit('tokens', tokens);\n                return _context.abrupt(\"return\", {\n                  tokens: tokens,\n                  res: null\n                });\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n\n      function refreshTokenNoCache(_x) {\n        return _refreshTokenNoCache.apply(this, arguments);\n      }\n\n      return refreshTokenNoCache;\n    }()\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n\n  }, {\n    key: \"fetchIdToken\",\n    value: function () {\n      var _fetchIdToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(targetAudience) {\n        var idTokenPath, idToken, instanceOptions;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                idTokenPath = \"service-accounts/\".concat(this.serviceAccountEmail, \"/identity\") + \"?format=full&audience=\".concat(targetAudience);\n                _context2.prev = 1;\n                instanceOptions = {\n                  property: idTokenPath\n                };\n                _context2.next = 5;\n                return gcpMetadata.instance(instanceOptions);\n\n              case 5:\n                idToken = _context2.sent;\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                _context2.t0.message = \"Could not fetch ID token: \".concat(_context2.t0.message);\n                throw _context2.t0;\n\n              case 12:\n                return _context2.abrupt(\"return\", idToken);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8]]);\n      }));\n\n      function fetchIdToken(_x2) {\n        return _fetchIdToken.apply(this, arguments);\n      }\n\n      return fetchIdToken;\n    }()\n  }, {\n    key: \"wrapError\",\n    value: function wrapError(e) {\n      var res = e.response;\n\n      if (res && res.status) {\n        e.code = res.status.toString();\n\n        if (res.status === 403) {\n          e.message = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified: ' + e.message;\n        } else if (res.status === 404) {\n          e.message = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified: ' + e.message;\n        }\n      }\n    }\n  }]);\n\n  return Compute;\n}(oauth2client_1.OAuth2Client);\n\nexports.Compute = Compute;","map":{"version":3,"names":["Object","defineProperty","exports","value","Compute","arrify","require","gcpMetadata","oauth2client_1","options","credentials","expiry_date","refresh_token","serviceAccountEmail","scopes","refreshToken","tokenPath","instanceOptions","property","length","params","join","instance","data","message","wrapError","tokens","expires_in","Date","getTime","emit","res","targetAudience","idTokenPath","idToken","e","response","status","code","toString","OAuth2Client"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/google-auth-library/build/src/auth/computeclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Compute = void 0;\nconst arrify = require(\"arrify\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n        this.scopes = arrify(options.scopes);\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath,\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(','),\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            e.message = `Could not refresh access token: ${e.message}`;\n            this.wrapError(e);\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res: null };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` +\n            `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath,\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            e.message = `Could not fetch ID token: ${e.message}`;\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.code = res.status.toString();\n            if (res.status === 403) {\n                e.message =\n                    'A Forbidden error was returned while attempting to retrieve an access ' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have the correct permission scopes specified: ' +\n                        e.message;\n            }\n            else if (res.status === 404) {\n                e.message =\n                    'A Not Found error was returned while attempting to retrieve an access' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have any permission scopes specified: ' +\n                        e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n//# sourceMappingURL=computeclient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}