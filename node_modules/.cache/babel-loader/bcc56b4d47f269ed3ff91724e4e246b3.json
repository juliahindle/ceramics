{"ast":null,"code":"const _ = require('lodash');\n\nconst {\n  JWT\n} = require('google-auth-library');\n\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\n\nconst {\n  getFieldMask\n} = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = ['https://www.googleapis.com/auth/spreadsheets' // the list from the sheets v4 auth for spreadsheets.get\n// 'https://www.googleapis.com/auth/drive',\n// 'https://www.googleapis.com/auth/drive.readonly',\n// 'https://www.googleapis.com/auth/drive.file',\n// 'https://www.googleapis.com/auth/spreadsheets',\n// 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH'\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null; // create an axios instance with sheet root URL and interceptors to handle auth\n\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId || ''}`,\n\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n\n        _.keys(params).forEach(key => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], val => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n\n        return options ? options.slice(0, -1) : options;\n      }\n\n    }); // have to use bind here or the functions dont have access to `this` :(\n\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(this._handleAxiosResponse.bind(this), this._handleAxiosErrors.bind(this));\n    return this;\n  } // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n\n\n  async createNewSpreadsheetDocument(properties) {\n    // see updateProperties for more info about available properties\n    if (this.spreadsheetId) {\n      throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n    }\n\n    const response = await this.axios.post(this.url, {\n      properties\n    });\n    this.spreadsheetId = response.data.spreadsheetId;\n    this.axios.defaults.baseURL += this.spreadsheetId;\n    this._rawProperties = response.data.properties;\n\n    _.each(response.data.sheets, s => this._updateOrCreateSheet(s));\n  } // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n\n\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  } // token must be created and managed (refreshed) elsewhere\n\n\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  async useOAuth2Client(oAuth2Client) {\n    this.authMode = AUTH_MODES.OAUTH;\n    this.oAuth2Client = oAuth2Client;\n  } // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n\n\n  async useServiceAccountAuth(creds) {\n    let impersonateAs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  } // TODO: provide mechanism to share single JWT auth between docs?\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly'); // this seems to do the right thing and only renew the token if expired\n\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else if (this.authMode === AUTH_MODES.OAUTH) {\n      const credentials = await this.oAuth2Client.getAccessToken();\n      config.headers.Authorization = `Bearer ${credentials.token}`;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n\n    return config;\n  }\n\n  async _handleAxiosResponse(response) {\n    return response;\n  }\n\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n      const {\n        code,\n        message\n      } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{\n        [requestType]: requestParams\n      }],\n      includeSpreadsheetInResponse: true // responseRanges: [string]\n      // responseIncludeGridData: true\n\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n    _.each(response.data.updatedSpreadsheet.sheets, s => this._updateOrCreateSheet(s)); // console.log('API RESPONSE', response.data.replies[0][requestType]);\n\n\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...(responseRanges && {\n        responseIncludeGridData: true,\n        ...(responseRanges !== '*' && {\n          responseRanges\n        })\n      })\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n    _.each(response.data.updatedSpreadsheet.sheets, s => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) {\n    this._rawProperties = newProperties;\n  }\n\n  _updateOrCreateSheet(_ref) {\n    let {\n      properties,\n      data\n    } = _ref;\n    const {\n      sheetId\n    } = properties;\n\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, {\n        properties,\n        data\n      });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  } // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n\n\n  _getProp(param) {\n    this._ensureInfoLoaded();\n\n    return this._rawProperties[param];\n  }\n\n  _setProp(param, newVal) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() {\n    return this._getProp('title');\n  }\n\n  get locale() {\n    return this._getProp('locale');\n  }\n\n  get timeZone() {\n    return this._getProp('timeZone');\n  }\n\n  get autoRecalc() {\n    return this._getProp('autoRecalc');\n  }\n\n  get defaultFormat() {\n    return this._getProp('defaultFormat');\n  }\n\n  get spreadsheetTheme() {\n    return this._getProp('spreadsheetTheme');\n  }\n\n  get iterativeCalculationSettings() {\n    return this._getProp('iterativeCalculationSettings');\n  }\n\n  set title(newVal) {\n    this._setProp('title', newVal);\n  }\n\n  set locale(newVal) {\n    this._setProp('locale', newVal);\n  }\n\n  set timeZone(newVal) {\n    this._setProp('timeZone', newVal);\n  }\n\n  set autoRecalc(newVal) {\n    this._setProp('autoRecalc', newVal);\n  }\n\n  set defaultFormat(newVal) {\n    this._setProp('defaultFormat', newVal);\n  }\n\n  set spreadsheetTheme(newVal) {\n    this._setProp('spreadsheetTheme', newVal);\n  }\n\n  set iterativeCalculationSettings(newVal) {\n    this._setProp('iterativeCalculationSettings', newVal);\n  }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties)\n    });\n  } // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n\n\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: { ...(includeCells && {\n          includeGridData: true\n        })\n      }\n    });\n    this._spreadsheetUrl = response.data.spreadsheetUrl;\n    this._rawProperties = response.data.properties;\n\n    _.each(response.data.sheets, s => this._updateOrCreateSheet(s));\n  }\n\n  async getInfo() {\n    return this.loadInfo();\n  } // alias to mimic old version\n\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  } // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n\n\n  get sheetCount() {\n    this._ensureInfoLoaded();\n\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet() {\n    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex')\n    }); // _makeSingleUpdateRequest already adds the sheet\n\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId]; // allow it to work with `.headers` but `.headerValues` is the real prop\n\n    const headers = properties.headerValues || properties.headers;\n\n    if (headers) {\n      await newSheet.setHeaderRow(headers, properties.headerRowIndex);\n    }\n\n    return newSheet;\n  }\n\n  async addWorksheet(properties) {\n    return this.addSheet(properties);\n  } // alias to mimic old version\n\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', {\n      sheetId\n    });\n    delete this._rawSheets[sheetId];\n  } // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n\n\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', {\n      namedRangeId\n    });\n  } // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n\n\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n\n    const dataFilters = _.map(filtersArray, filter => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : {\n          a1Range: filter\n        };\n      }\n\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        } // TODO: make this support Developer Metadata filters\n\n\n        return {\n          gridRange: filter\n        };\n      }\n\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result; // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters\n        }\n      }); // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters\n      });\n    }\n\n    const {\n      sheets\n    } = result.data;\n\n    _.each(sheets, sheet => {\n      this._updateOrCreateSheet(sheet);\n    });\n  } // EXPORTING /////////////////////////////////////////////////////////////\n\n\n  async _downloadAs(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n    // see https://stackoverflow.com/questions/11619805/using-the-google-drive-api-to-download-a-spreadsheet-in-csv-format/51235960#51235960\n    if (['html', 'xlsx', 'ods'].includes(fileType)) {\n      if (worksheetId) throw new Error(`Cannot specify worksheetId when exporting as ${fileType}`);\n    } else if (['csv', 'tsv', 'pdf'].includes(fileType)) {\n      if (worksheetId === undefined) throw new Error(`Must specify worksheetId when exporting as ${fileType}`);\n    } else {\n      throw new Error(`unsupported export fileType - ${fileType}`);\n    } // google UI shows \"html\" but passes through \"zip\"\n\n\n    if (fileType === 'html') fileType = 'zip';\n\n    const exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n\n    const response = await this.axios.get(exportUrl, {\n      baseUrl: '',\n      // unset baseUrl since we're not hitting the normal sheets API\n      params: {\n        id: this.spreadsheetId,\n        format: fileType,\n        ...(worksheetId && {\n          gid: worksheetId\n        })\n      },\n      responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer'\n    });\n    return response.data;\n  }\n\n  async downloadAsHTML() {\n    let returnStreamInsteadOfBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._downloadAs('html', null, returnStreamInsteadOfBuffer);\n  }\n\n  async downloadAsXLSX() {\n    let returnStreamInsteadOfBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer);\n  }\n\n  async downloadAsODS() {\n    let returnStreamInsteadOfBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._downloadAs('ods', null, returnStreamInsteadOfBuffer);\n  }\n\n}\n\nmodule.exports = GoogleSpreadsheet;","map":{"version":3,"names":["_","require","JWT","Axios","GoogleSpreadsheetWorksheet","getFieldMask","GOOGLE_AUTH_SCOPES","AUTH_MODES","API_KEY","RAW_ACCESS_TOKEN","OAUTH","GoogleSpreadsheet","constructor","sheetId","spreadsheetId","authMode","_rawSheets","_rawProperties","_spreadsheetUrl","axios","create","baseURL","paramsSerializer","params","options","keys","forEach","key","isParamTypeObject","isParamTypeArray","length","encodeURIComponent","each","val","slice","interceptors","request","use","_setAxiosRequestAuth","bind","response","_handleAxiosResponse","_handleAxiosErrors","createNewSpreadsheetDocument","properties","Error","post","url","data","defaults","sheets","s","_updateOrCreateSheet","useApiKey","apiKey","useRawAccessToken","token","accessToken","useOAuth2Client","oAuth2Client","useServiceAccountAuth","creds","impersonateAs","jwtClient","email","client_email","private_key","scopes","subject","renewJwtAuth","authorize","config","headers","Authorization","credentials","access_token","getAccessToken","error","code","message","get","_makeSingleUpdateRequest","requestType","requestParams","requests","includeSpreadsheetInResponse","_updateRawProperties","updatedSpreadsheet","replies","_makeBatchUpdateRequest","responseRanges","responseIncludeGridData","_ensureInfoLoaded","newProperties","_fillCellData","_getProp","param","_setProp","newVal","title","locale","timeZone","autoRecalc","defaultFormat","spreadsheetTheme","iterativeCalculationSettings","updateProperties","fields","loadInfo","includeCells","includeGridData","spreadsheetUrl","getInfo","resetLocalCache","sheetCount","values","sheetsById","sheetsByIndex","sortBy","sheetsByTitle","keyBy","addSheet","omit","newSheetId","newSheet","headerValues","setHeaderRow","headerRowIndex","addWorksheet","deleteSheet","addNamedRange","name","range","namedRangeId","deleteNamedRange","loadCells","filters","readOnlyMode","filtersArray","isArray","dataFilters","map","filter","isString","a1Range","isObject","gridRange","result","ranges","sheet","_downloadAs","fileType","worksheetId","returnStreamInsteadOfBuffer","includes","undefined","exportUrl","replace","baseUrl","id","format","gid","responseType","downloadAsHTML","downloadAsXLSX","downloadAsODS","module","exports"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/google-spreadsheet/lib/GoogleSpreadsheet.js"],"sourcesContent":["const _ = require('lodash');\nconst { JWT } = require('google-auth-library');\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst { getFieldMask } = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = [\n  'https://www.googleapis.com/auth/spreadsheets',\n\n  // the list from the sheets v4 auth for spreadsheets.get\n  // 'https://www.googleapis.com/auth/drive',\n  // 'https://www.googleapis.com/auth/drive.readonly',\n  // 'https://www.googleapis.com/auth/drive.file',\n  // 'https://www.googleapis.com/auth/spreadsheets',\n  // 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\n\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH',\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId || ''}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach((key) => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], (val) => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      },\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(\n      this._handleAxiosResponse.bind(this),\n      this._handleAxiosErrors.bind(this)\n    );\n\n    return this;\n  }\n\n  // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n  async createNewSpreadsheetDocument(properties) {\n    // see updateProperties for more info about available properties\n\n    if (this.spreadsheetId) {\n      throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n    }\n    const response = await this.axios.post(this.url, {\n      properties,\n    });\n    this.spreadsheetId = response.data.spreadsheetId;\n    this.axios.defaults.baseURL += this.spreadsheetId;\n\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  async useOAuth2Client(oAuth2Client) {\n    this.authMode = AUTH_MODES.OAUTH;\n    this.oAuth2Client = oAuth2Client;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs,\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else if (this.authMode === AUTH_MODES.OAUTH) {\n      const credentials = await this.oAuth2Client.getAccessToken();\n      config.headers.Authorization = `Bearer ${credentials.token}`;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n\n  async _handleAxiosResponse(response) { return response; }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n\n      const { code, message } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{ [requestType]: requestParams }],\n      includeSpreadsheetInResponse: true,\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...responseRanges && {\n        responseIncludeGridData: true,\n        ...responseRanges !== '*' && { responseRanges },\n      },\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) { this._rawProperties = newProperties; }\n\n  _updateOrCreateSheet({ properties, data }) {\n    const { sheetId } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, { properties, data });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() { return this._getProp('title'); }\n  get locale() { return this._getProp('locale'); }\n  get timeZone() { return this._getProp('timeZone'); }\n  get autoRecalc() { return this._getProp('autoRecalc'); }\n  get defaultFormat() { return this._getProp('defaultFormat'); }\n  get spreadsheetTheme() { return this._getProp('spreadsheetTheme'); }\n  get iterativeCalculationSettings() { return this._getProp('iterativeCalculationSettings'); }\n\n  set title(newVal) { this._setProp('title', newVal); }\n  set locale(newVal) { this._setProp('locale', newVal); }\n  set timeZone(newVal) { this._setProp('timeZone', newVal); }\n  set autoRecalc(newVal) { this._setProp('autoRecalc', newVal); }\n  set defaultFormat(newVal) { this._setProp('defaultFormat', newVal); }\n  set spreadsheetTheme(newVal) { this._setProp('spreadsheetTheme', newVal); }\n  set iterativeCalculationSettings(newVal) { this._setProp('iterativeCalculationSettings', newVal); }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...includeCells && { includeGridData: true },\n      },\n    });\n    this._spreadsheetUrl = response.data.spreadsheetUrl;\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n  async getInfo() { return this.loadInfo(); } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex'),\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    const headers = properties.headerValues || properties.headers;\n    if (headers) {\n      await newSheet.setHeaderRow(headers, properties.headerRowIndex);\n    }\n\n    return newSheet;\n  }\n  async addWorksheet(properties) { return this.addSheet(properties); } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', { sheetId });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId,\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', { namedRangeId });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, (filter) => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : { a1Range: filter };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return { gridRange: filter };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters,\n        },\n      });\n    // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters,\n      });\n    }\n\n    const { sheets } = result.data;\n    _.each(sheets, (sheet) => { this._updateOrCreateSheet(sheet); });\n  }\n\n  // EXPORTING /////////////////////////////////////////////////////////////\n  async _downloadAs(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n    // see https://stackoverflow.com/questions/11619805/using-the-google-drive-api-to-download-a-spreadsheet-in-csv-format/51235960#51235960\n\n    if (['html', 'xlsx', 'ods'].includes(fileType)) {\n      if (worksheetId) throw new Error(`Cannot specify worksheetId when exporting as ${fileType}`);\n    } else if (['csv', 'tsv', 'pdf'].includes(fileType)) {\n      if (worksheetId === undefined) throw new Error(`Must specify worksheetId when exporting as ${fileType}`);\n    } else {\n      throw new Error(`unsupported export fileType - ${fileType}`);\n    }\n\n    // google UI shows \"html\" but passes through \"zip\"\n    if (fileType === 'html') fileType = 'zip';\n\n    const exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n    const response = await this.axios.get(exportUrl, {\n      baseUrl: '', // unset baseUrl since we're not hitting the normal sheets API\n      params: {\n        id: this.spreadsheetId,\n        format: fileType,\n        ...worksheetId && { gid: worksheetId },\n      },\n      responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer',\n    });\n    return response.data;\n  }\n  async downloadAsHTML(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('html', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsXLSX(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsODS(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('ods', null, returnStreamInsteadOfBuffer);\n  }\n}\n\nmodule.exports = GoogleSpreadsheet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}