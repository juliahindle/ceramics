{"ast":null,"code":"\"use strict\"; // Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _objectSpread = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWTAccess = void 0;\n\nvar jws = require(\"jws\");\n\nvar LRU = require(\"lru-cache\");\n\nvar DEFAULT_HEADER = {\n  alg: 'RS256',\n  typ: 'JWT'\n};\n\nvar JWTAccess = /*#__PURE__*/function () {\n  /**\n   * JWTAccess service account credentials.\n   *\n   * Create a new access token by using the credential to create a new JWT token\n   * that's recognized as the access token.\n   *\n   * @param email the service account email address.\n   * @param key the private key that will be used to sign the token.\n   * @param keyId the ID of the private key used to sign the token.\n   */\n  function JWTAccess(email, key, keyId, eagerRefreshThresholdMillis) {\n    _classCallCheck(this, JWTAccess);\n\n    this.cache = new LRU({\n      max: 500,\n      maxAge: 60 * 60 * 1000\n    });\n    this.email = email;\n    this.key = key;\n    this.keyId = keyId;\n    this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1000;\n  }\n  /**\n   * Get a non-expired access token, after refreshing if necessary.\n   *\n   * @param url The URI being authorized.\n   * @param additionalClaims An object with a set of additional claims to\n   * include in the payload.\n   * @returns An object that includes the authorization header.\n   */\n\n\n  _createClass(JWTAccess, [{\n    key: \"getRequestHeaders\",\n    value: function getRequestHeaders(url, additionalClaims) {\n      // Return cached authorization headers, unless we are within\n      // eagerRefreshThresholdMillis ms of them expiring:\n      var cachedToken = this.cache.get(url);\n      var now = Date.now();\n\n      if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {\n        return cachedToken.headers;\n      }\n\n      var iat = Math.floor(Date.now() / 1000);\n      var exp = JWTAccess.getExpirationTime(iat); // The payload used for signed JWT headers has:\n      // iss == sub == <client email>\n      // aud == <the authorization uri>\n\n      var defaultClaims = {\n        iss: this.email,\n        sub: this.email,\n        aud: url,\n        exp: exp,\n        iat: iat\n      }; // if additionalClaims are provided, ensure they do not collide with\n      // other required claims.\n\n      if (additionalClaims) {\n        for (var claim in defaultClaims) {\n          if (additionalClaims[claim]) {\n            throw new Error(\"The '\".concat(claim, \"' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.\"));\n          }\n        }\n      }\n\n      var header = this.keyId ? _objectSpread(_objectSpread({}, DEFAULT_HEADER), {}, {\n        kid: this.keyId\n      }) : DEFAULT_HEADER;\n      var payload = Object.assign(defaultClaims, additionalClaims); // Sign the jwt and add it to the cache\n\n      var signedJWT = jws.sign({\n        header: header,\n        payload: payload,\n        secret: this.key\n      });\n      var headers = {\n        Authorization: \"Bearer \".concat(signedJWT)\n      };\n      this.cache.set(url, {\n        expiration: exp * 1000,\n        headers: headers\n      });\n      return headers;\n    }\n    /**\n     * Returns an expiration time for the JWT token.\n     *\n     * @param iat The issued at time for the JWT.\n     * @returns An expiration time for the JWT.\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value:\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */\n    function fromJSON(json) {\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the service account auth settings.');\n      }\n\n      if (!json.client_email) {\n        throw new Error('The incoming JSON object does not contain a client_email field');\n      }\n\n      if (!json.private_key) {\n        throw new Error('The incoming JSON object does not contain a private_key field');\n      } // Extract the relevant information from the json key file.\n\n\n      this.email = json.client_email;\n      this.key = json.private_key;\n      this.keyId = json.private_key_id;\n      this.projectId = json.project_id;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream, callback) {\n      if (callback) {\n        this.fromStreamAsync(inputStream).then(function () {\n          return callback();\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          reject(new Error('Must pass in a stream containing the service account auth settings.'));\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('data', function (chunk) {\n          return s += chunk;\n        }).on('error', reject).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n\n            _this.fromJSON(data);\n\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      });\n    }\n  }], [{\n    key: \"getExpirationTime\",\n    value: function getExpirationTime(iat) {\n      var exp = iat + 3600; // 3600 seconds = 1 hour\n\n      return exp;\n    }\n  }]);\n\n  return JWTAccess;\n}();\n\nexports.JWTAccess = JWTAccess;","map":{"version":3,"names":["Object","defineProperty","exports","value","JWTAccess","jws","require","LRU","DEFAULT_HEADER","alg","typ","email","key","keyId","eagerRefreshThresholdMillis","cache","max","maxAge","url","additionalClaims","cachedToken","get","now","Date","expiration","headers","iat","Math","floor","exp","getExpirationTime","defaultClaims","iss","sub","aud","claim","Error","header","kid","payload","assign","signedJWT","sign","secret","Authorization","set","json","client_email","private_key","private_key_id","projectId","project_id","inputStream","callback","fromStreamAsync","then","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","fromJSON","err"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/google-auth-library/build/src/auth/jwtaccess.js"],"sourcesContent":["\"use strict\";\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWTAccess = void 0;\nconst jws = require(\"jws\");\nconst LRU = require(\"lru-cache\");\nconst DEFAULT_HEADER = {\n    alg: 'RS256',\n    typ: 'JWT',\n};\nclass JWTAccess {\n    /**\n     * JWTAccess service account credentials.\n     *\n     * Create a new access token by using the credential to create a new JWT token\n     * that's recognized as the access token.\n     *\n     * @param email the service account email address.\n     * @param key the private key that will be used to sign the token.\n     * @param keyId the ID of the private key used to sign the token.\n     */\n    constructor(email, key, keyId, eagerRefreshThresholdMillis) {\n        this.cache = new LRU({\n            max: 500,\n            maxAge: 60 * 60 * 1000,\n        });\n        this.email = email;\n        this.key = key;\n        this.keyId = keyId;\n        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1000;\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param url The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @returns An object that includes the authorization header.\n     */\n    getRequestHeaders(url, additionalClaims) {\n        // Return cached authorization headers, unless we are within\n        // eagerRefreshThresholdMillis ms of them expiring:\n        const cachedToken = this.cache.get(url);\n        const now = Date.now();\n        if (cachedToken &&\n            cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {\n            return cachedToken.headers;\n        }\n        const iat = Math.floor(Date.now() / 1000);\n        const exp = JWTAccess.getExpirationTime(iat);\n        // The payload used for signed JWT headers has:\n        // iss == sub == <client email>\n        // aud == <the authorization uri>\n        const defaultClaims = {\n            iss: this.email,\n            sub: this.email,\n            aud: url,\n            exp,\n            iat,\n        };\n        // if additionalClaims are provided, ensure they do not collide with\n        // other required claims.\n        if (additionalClaims) {\n            for (const claim in defaultClaims) {\n                if (additionalClaims[claim]) {\n                    throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n                }\n            }\n        }\n        const header = this.keyId\n            ? { ...DEFAULT_HEADER, kid: this.keyId }\n            : DEFAULT_HEADER;\n        const payload = Object.assign(defaultClaims, additionalClaims);\n        // Sign the jwt and add it to the cache\n        const signedJWT = jws.sign({ header, payload, secret: this.key });\n        const headers = { Authorization: `Bearer ${signedJWT}` };\n        this.cache.set(url, {\n            expiration: exp * 1000,\n            headers,\n        });\n        return headers;\n    }\n    /**\n     * Returns an expiration time for the JWT token.\n     *\n     * @param iat The issued at time for the JWT.\n     * @returns An expiration time for the JWT.\n     */\n    static getExpirationTime(iat) {\n        const exp = iat + 3600; // 3600 seconds = 1 hour\n        return exp;\n    }\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                reject(new Error('Must pass in a stream containing the service account auth settings.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('data', chunk => (s += chunk))\n                .on('error', reject)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.JWTAccess = JWTAccess;\n//# sourceMappingURL=jwtaccess.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}