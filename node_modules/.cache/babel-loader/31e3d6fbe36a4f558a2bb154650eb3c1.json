{"ast":null,"code":"var _objectSpread = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _defineProperty = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _regeneratorRuntime = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _ = require('lodash');\n\nvar _require = require('google-auth-library'),\n    JWT = _require.JWT;\n\nvar Axios = require('axios');\n\nvar GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\n\nvar _require2 = require('./utils'),\n    getFieldMask = _require2.getFieldMask;\n\nvar GOOGLE_AUTH_SCOPES = ['https://www.googleapis.com/auth/spreadsheets' // the list from the sheets v4 auth for spreadsheets.get\n// 'https://www.googleapis.com/auth/drive',\n// 'https://www.googleapis.com/auth/drive.readonly',\n// 'https://www.googleapis.com/auth/drive.file',\n// 'https://www.googleapis.com/auth/spreadsheets',\n// 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\nvar AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH'\n};\n\nvar GoogleSpreadsheet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheet(sheetId) {\n    _classCallCheck(this, GoogleSpreadsheet);\n\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null; // create an axios instance with sheet root URL and interceptors to handle auth\n\n    this.axios = Axios.create({\n      baseURL: \"https://sheets.googleapis.com/v4/spreadsheets/\".concat(sheetId || ''),\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer: function paramsSerializer(params) {\n        var options = '';\n\n        _.keys(params).forEach(function (key) {\n          var isParamTypeObject = typeof params[key] === 'object';\n          var isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n          if (!isParamTypeObject) options += \"\".concat(key, \"=\").concat(encodeURIComponent(params[key]), \"&\");\n\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], function (val) {\n              options += \"\".concat(key, \"=\").concat(encodeURIComponent(val), \"&\");\n            });\n          }\n        });\n\n        return options ? options.slice(0, -1) : options;\n      }\n    }); // have to use bind here or the functions dont have access to `this` :(\n\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(this._handleAxiosResponse.bind(this), this._handleAxiosErrors.bind(this));\n    return this;\n  } // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GoogleSpreadsheet, [{\n    key: \"createNewSpreadsheetDocument\",\n    value: function () {\n      var _createNewSpreadsheetDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(properties) {\n        var _this = this;\n\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.spreadsheetId) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n\n              case 2:\n                _context.next = 4;\n                return this.axios.post(this.url, {\n                  properties: properties\n                });\n\n              case 4:\n                response = _context.sent;\n                this.spreadsheetId = response.data.spreadsheetId;\n                this.axios.defaults.baseURL += this.spreadsheetId;\n                this._rawProperties = response.data.properties;\n\n                _.each(response.data.sheets, function (s) {\n                  return _this._updateOrCreateSheet(s);\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createNewSpreadsheetDocument(_x) {\n        return _createNewSpreadsheetDocument.apply(this, arguments);\n      }\n\n      return createNewSpreadsheetDocument;\n    }() // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"useApiKey\",\n    value: function () {\n      var _useApiKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.authMode = AUTH_MODES.API_KEY;\n                this.apiKey = key;\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function useApiKey(_x2) {\n        return _useApiKey.apply(this, arguments);\n      }\n\n      return useApiKey;\n    }() // token must be created and managed (refreshed) elsewhere\n\n  }, {\n    key: \"useRawAccessToken\",\n    value: function () {\n      var _useRawAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(token) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n                this.accessToken = token;\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function useRawAccessToken(_x3) {\n        return _useRawAccessToken.apply(this, arguments);\n      }\n\n      return useRawAccessToken;\n    }()\n  }, {\n    key: \"useOAuth2Client\",\n    value: function () {\n      var _useOAuth2Client = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(oAuth2Client) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.authMode = AUTH_MODES.OAUTH;\n                this.oAuth2Client = oAuth2Client;\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function useOAuth2Client(_x4) {\n        return _useOAuth2Client.apply(this, arguments);\n      }\n\n      return useOAuth2Client;\n    }() // creds should be an object obtained by loading the json file google gives you\n    // impersonateAs is an email of any user in the G Suite domain\n    // (only works if service account has domain-wide delegation enabled)\n\n  }, {\n    key: \"useServiceAccountAuth\",\n    value: function () {\n      var _useServiceAccountAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(creds) {\n        var impersonateAs,\n            _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                impersonateAs = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : null;\n                this.jwtClient = new JWT({\n                  email: creds.client_email,\n                  key: creds.private_key,\n                  scopes: GOOGLE_AUTH_SCOPES,\n                  subject: impersonateAs\n                });\n                _context5.next = 4;\n                return this.renewJwtAuth();\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function useServiceAccountAuth(_x5) {\n        return _useServiceAccountAuth.apply(this, arguments);\n      }\n\n      return useServiceAccountAuth;\n    }()\n  }, {\n    key: \"renewJwtAuth\",\n    value: function () {\n      var _renewJwtAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.authMode = AUTH_MODES.JWT;\n                _context6.next = 3;\n                return this.jwtClient.authorize();\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function renewJwtAuth() {\n        return _renewJwtAuth.apply(this, arguments);\n      }\n\n      return renewJwtAuth;\n    }() // TODO: provide mechanism to share single JWT auth between docs?\n    // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_setAxiosRequestAuth\",\n    value: function () {\n      var _setAxiosRequestAuth2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(config) {\n        var credentials;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this.authMode === AUTH_MODES.JWT)) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                if (this.jwtClient) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('JWT auth is not set up properly');\n\n              case 3:\n                _context7.next = 5;\n                return this.jwtClient.authorize();\n\n              case 5:\n                config.headers.Authorization = \"Bearer \".concat(this.jwtClient.credentials.access_token);\n                _context7.next = 29;\n                break;\n\n              case 8:\n                if (!(this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN)) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                if (this.accessToken) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                throw new Error('Invalid access token');\n\n              case 11:\n                config.headers.Authorization = \"Bearer \".concat(this.accessToken);\n                _context7.next = 29;\n                break;\n\n              case 14:\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context7.next = 21;\n                  break;\n                }\n\n                if (this.apiKey) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                throw new Error('Please set API key');\n\n              case 17:\n                config.params = config.params || {};\n                config.params.key = this.apiKey;\n                _context7.next = 29;\n                break;\n\n              case 21:\n                if (!(this.authMode === AUTH_MODES.OAUTH)) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                _context7.next = 24;\n                return this.oAuth2Client.getAccessToken();\n\n              case 24:\n                credentials = _context7.sent;\n                config.headers.Authorization = \"Bearer \".concat(credentials.token);\n                _context7.next = 29;\n                break;\n\n              case 28:\n                throw new Error('You must initialize some kind of auth before making any requests');\n\n              case 29:\n                return _context7.abrupt(\"return\", config);\n\n              case 30:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _setAxiosRequestAuth(_x6) {\n        return _setAxiosRequestAuth2.apply(this, arguments);\n      }\n\n      return _setAxiosRequestAuth;\n    }()\n  }, {\n    key: \"_handleAxiosResponse\",\n    value: function () {\n      var _handleAxiosResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(response) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", response);\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function _handleAxiosResponse(_x7) {\n        return _handleAxiosResponse2.apply(this, arguments);\n      }\n\n      return _handleAxiosResponse;\n    }()\n  }, {\n    key: \"_handleAxiosErrors\",\n    value: function () {\n      var _handleAxiosErrors2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(error) {\n        var _error$response$data$, code, message;\n\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(error.response && error.response.data)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                if (error.response.data.error) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                throw error;\n\n              case 3:\n                _error$response$data$ = error.response.data.error, code = _error$response$data$.code, message = _error$response$data$.message;\n                error.message = \"Google API error - [\".concat(code, \"] \").concat(message);\n                throw error;\n\n              case 6:\n                if (!(_.get(error, 'response.status') === 403)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n\n              case 9:\n                throw error;\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _handleAxiosErrors(_x8) {\n        return _handleAxiosErrors2.apply(this, arguments);\n      }\n\n      return _handleAxiosErrors;\n    }()\n  }, {\n    key: \"_makeSingleUpdateRequest\",\n    value: function () {\n      var _makeSingleUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(requestType, requestParams) {\n        var _this2 = this;\n\n        var response;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.axios.post(':batchUpdate', {\n                  requests: [_defineProperty({}, requestType, requestParams)],\n                  includeSpreadsheetInResponse: true // responseRanges: [string]\n                  // responseIncludeGridData: true\n\n                });\n\n              case 2:\n                response = _context10.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this2._updateOrCreateSheet(s);\n                }); // console.log('API RESPONSE', response.data.replies[0][requestType]);\n\n\n                return _context10.abrupt(\"return\", response.data.replies[0][requestType]);\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _makeSingleUpdateRequest(_x9, _x10) {\n        return _makeSingleUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeSingleUpdateRequest;\n    }()\n  }, {\n    key: \"_makeBatchUpdateRequest\",\n    value: function () {\n      var _makeBatchUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(requests, responseRanges) {\n        var _this3 = this;\n\n        var response;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.axios.post(':batchUpdate', _objectSpread({\n                  requests: requests,\n                  includeSpreadsheetInResponse: true\n                }, responseRanges && _objectSpread({\n                  responseIncludeGridData: true\n                }, responseRanges !== '*' && {\n                  responseRanges: responseRanges\n                })));\n\n              case 2:\n                response = _context11.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this3._updateOrCreateSheet(s);\n                });\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _makeBatchUpdateRequest(_x11, _x12) {\n        return _makeBatchUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeBatchUpdateRequest;\n    }()\n  }, {\n    key: \"_ensureInfoLoaded\",\n    value: function _ensureInfoLoaded() {\n      if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n    }\n  }, {\n    key: \"_updateRawProperties\",\n    value: function _updateRawProperties(newProperties) {\n      this._rawProperties = newProperties;\n    }\n  }, {\n    key: \"_updateOrCreateSheet\",\n    value: function _updateOrCreateSheet(_ref2) {\n      var properties = _ref2.properties,\n          data = _ref2.data;\n      var sheetId = properties.sheetId;\n\n      if (!this._rawSheets[sheetId]) {\n        this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, {\n          properties: properties,\n          data: data\n        });\n      } else {\n        this._rawSheets[sheetId]._rawProperties = properties;\n\n        this._rawSheets[sheetId]._fillCellData(data);\n      }\n    } // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_getProp\",\n    value: function _getProp(param) {\n      this._ensureInfoLoaded();\n\n      return this._rawProperties[param];\n    }\n  }, {\n    key: \"_setProp\",\n    value: function _setProp(param, newVal) {\n      // eslint-disable-line no-unused-vars\n      throw new Error('Do not update directly - use `updateProperties()`');\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._getProp('title');\n    },\n    set: function set(newVal) {\n      this._setProp('title', newVal);\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this._getProp('locale');\n    },\n    set: function set(newVal) {\n      this._setProp('locale', newVal);\n    }\n  }, {\n    key: \"timeZone\",\n    get: function get() {\n      return this._getProp('timeZone');\n    },\n    set: function set(newVal) {\n      this._setProp('timeZone', newVal);\n    }\n  }, {\n    key: \"autoRecalc\",\n    get: function get() {\n      return this._getProp('autoRecalc');\n    },\n    set: function set(newVal) {\n      this._setProp('autoRecalc', newVal);\n    }\n  }, {\n    key: \"defaultFormat\",\n    get: function get() {\n      return this._getProp('defaultFormat');\n    },\n    set: function set(newVal) {\n      this._setProp('defaultFormat', newVal);\n    }\n  }, {\n    key: \"spreadsheetTheme\",\n    get: function get() {\n      return this._getProp('spreadsheetTheme');\n    },\n    set: function set(newVal) {\n      this._setProp('spreadsheetTheme', newVal);\n    }\n  }, {\n    key: \"iterativeCalculationSettings\",\n    get: function get() {\n      return this._getProp('iterativeCalculationSettings');\n    },\n    set: function set(newVal) {\n      this._setProp('iterativeCalculationSettings', newVal);\n    }\n  }, {\n    key: \"updateProperties\",\n    value: function () {\n      var _updateProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(properties) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n                  properties: properties,\n                  fields: getFieldMask(properties)\n                });\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function updateProperties(_x13) {\n        return _updateProperties.apply(this, arguments);\n      }\n\n      return updateProperties;\n    }() // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadInfo\",\n    value: function () {\n      var _loadInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(includeCells) {\n        var _this4 = this;\n\n        var response;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.axios.get('/', {\n                  params: _objectSpread({}, includeCells && {\n                    includeGridData: true\n                  })\n                });\n\n              case 2:\n                response = _context13.sent;\n                this._spreadsheetUrl = response.data.spreadsheetUrl;\n                this._rawProperties = response.data.properties;\n\n                _.each(response.data.sheets, function (s) {\n                  return _this4._updateOrCreateSheet(s);\n                });\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function loadInfo(_x14) {\n        return _loadInfo.apply(this, arguments);\n      }\n\n      return loadInfo;\n    }()\n  }, {\n    key: \"getInfo\",\n    value: function () {\n      var _getInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.loadInfo());\n\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getInfo() {\n        return _getInfo.apply(this, arguments);\n      }\n\n      return getInfo;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"resetLocalCache\",\n    value: function resetLocalCache() {\n      this._rawProperties = null;\n      this._rawSheets = {};\n    } // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"sheetCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.values(this._rawSheets).length;\n    }\n  }, {\n    key: \"sheetsById\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this._rawSheets;\n    }\n  }, {\n    key: \"sheetsByIndex\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.sortBy(this._rawSheets, 'index');\n    }\n  }, {\n    key: \"sheetsByTitle\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.keyBy(this._rawSheets, 'title');\n    }\n  }, {\n    key: \"addSheet\",\n    value: function () {\n      var _addSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var properties,\n            response,\n            newSheetId,\n            newSheet,\n            headers,\n            _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                properties = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};\n                _context15.next = 3;\n                return this._makeSingleUpdateRequest('addSheet', {\n                  properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex')\n                });\n\n              case 3:\n                response = _context15.sent;\n                // _makeSingleUpdateRequest already adds the sheet\n                newSheetId = response.properties.sheetId;\n                newSheet = this.sheetsById[newSheetId]; // allow it to work with `.headers` but `.headerValues` is the real prop\n\n                headers = properties.headerValues || properties.headers;\n\n                if (!headers) {\n                  _context15.next = 10;\n                  break;\n                }\n\n                _context15.next = 10;\n                return newSheet.setHeaderRow(headers, properties.headerRowIndex);\n\n              case 10:\n                return _context15.abrupt(\"return\", newSheet);\n\n              case 11:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function addSheet() {\n        return _addSheet.apply(this, arguments);\n      }\n\n      return addSheet;\n    }()\n  }, {\n    key: \"addWorksheet\",\n    value: function () {\n      var _addWorksheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(properties) {\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", this.addSheet(properties));\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function addWorksheet(_x15) {\n        return _addWorksheet.apply(this, arguments);\n      }\n\n      return addWorksheet;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"deleteSheet\",\n    value: function () {\n      var _deleteSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(sheetId) {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this._makeSingleUpdateRequest('deleteSheet', {\n                  sheetId: sheetId\n                });\n\n              case 2:\n                delete this._rawSheets[sheetId];\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function deleteSheet(_x16) {\n        return _deleteSheet.apply(this, arguments);\n      }\n\n      return deleteSheet;\n    }() // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"addNamedRange\",\n    value: function () {\n      var _addNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(name, range, namedRangeId) {\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt(\"return\", this._makeSingleUpdateRequest('addNamedRange', {\n                  name: name,\n                  range: range,\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function addNamedRange(_x17, _x18, _x19) {\n        return _addNamedRange.apply(this, arguments);\n      }\n\n      return addNamedRange;\n    }()\n  }, {\n    key: \"deleteNamedRange\",\n    value: function () {\n      var _deleteNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(namedRangeId) {\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                return _context19.abrupt(\"return\", this._makeSingleUpdateRequest('deleteNamedRange', {\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function deleteNamedRange(_x20) {\n        return _deleteNamedRange.apply(this, arguments);\n      }\n\n      return deleteNamedRange;\n    }() // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadCells\",\n    value: function () {\n      var _loadCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(filters) {\n        var _this5 = this;\n\n        var readOnlyMode, filtersArray, dataFilters, result, sheets;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                // you can pass in a single filter or an array of filters\n                // strings are treated as a1 ranges\n                // objects are treated as GridRange objects\n                // TODO: make it support DeveloperMetadataLookup objects\n                // TODO: switch to this mode if using a read-only auth token?\n                readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n                filtersArray = _.isArray(filters) ? filters : [filters];\n                dataFilters = _.map(filtersArray, function (filter) {\n                  if (_.isString(filter)) {\n                    return readOnlyMode ? filter : {\n                      a1Range: filter\n                    };\n                  }\n\n                  if (_.isObject(filter)) {\n                    if (readOnlyMode) {\n                      throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n                    } // TODO: make this support Developer Metadata filters\n\n\n                    return {\n                      gridRange: filter\n                    };\n                  }\n\n                  throw new Error('Each filter must be an A1 range string or a gridrange object');\n                });\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context20.next = 9;\n                  break;\n                }\n\n                _context20.next = 6;\n                return this.axios.get('/', {\n                  params: {\n                    includeGridData: true,\n                    ranges: dataFilters\n                  }\n                });\n\n              case 6:\n                result = _context20.sent;\n                _context20.next = 12;\n                break;\n\n              case 9:\n                _context20.next = 11;\n                return this.axios.post(':getByDataFilter', {\n                  includeGridData: true,\n                  dataFilters: dataFilters\n                });\n\n              case 11:\n                result = _context20.sent;\n\n              case 12:\n                sheets = result.data.sheets;\n\n                _.each(sheets, function (sheet) {\n                  _this5._updateOrCreateSheet(sheet);\n                });\n\n              case 14:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function loadCells(_x21) {\n        return _loadCells.apply(this, arguments);\n      }\n\n      return loadCells;\n    }() // EXPORTING /////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_downloadAs\",\n    value: function () {\n      var _downloadAs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n        var exportUrl, response;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                if (!['html', 'xlsx', 'ods'].includes(fileType)) {\n                  _context21.next = 5;\n                  break;\n                }\n\n                if (!worksheetId) {\n                  _context21.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Cannot specify worksheetId when exporting as \".concat(fileType));\n\n              case 3:\n                _context21.next = 11;\n                break;\n\n              case 5:\n                if (!['csv', 'tsv', 'pdf'].includes(fileType)) {\n                  _context21.next = 10;\n                  break;\n                }\n\n                if (!(worksheetId === undefined)) {\n                  _context21.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Must specify worksheetId when exporting as \".concat(fileType));\n\n              case 8:\n                _context21.next = 11;\n                break;\n\n              case 10:\n                throw new Error(\"unsupported export fileType - \".concat(fileType));\n\n              case 11:\n                // google UI shows \"html\" but passes through \"zip\"\n                if (fileType === 'html') fileType = 'zip';\n                exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n                _context21.next = 15;\n                return this.axios.get(exportUrl, {\n                  baseUrl: '',\n                  // unset baseUrl since we're not hitting the normal sheets API\n                  params: _objectSpread({\n                    id: this.spreadsheetId,\n                    format: fileType\n                  }, worksheetId && {\n                    gid: worksheetId\n                  }),\n                  responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer'\n                });\n\n              case 15:\n                response = _context21.sent;\n                return _context21.abrupt(\"return\", response.data);\n\n              case 17:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function _downloadAs(_x22, _x23, _x24) {\n        return _downloadAs2.apply(this, arguments);\n      }\n\n      return _downloadAs;\n    }()\n  }, {\n    key: \"downloadAsHTML\",\n    value: function () {\n      var _downloadAsHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var returnStreamInsteadOfBuffer,\n            _args22 = arguments;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                returnStreamInsteadOfBuffer = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : false;\n                return _context22.abrupt(\"return\", this._downloadAs('html', null, returnStreamInsteadOfBuffer));\n\n              case 2:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function downloadAsHTML() {\n        return _downloadAsHTML.apply(this, arguments);\n      }\n\n      return downloadAsHTML;\n    }()\n  }, {\n    key: \"downloadAsXLSX\",\n    value: function () {\n      var _downloadAsXLSX = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n        var returnStreamInsteadOfBuffer,\n            _args23 = arguments;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                returnStreamInsteadOfBuffer = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : false;\n                return _context23.abrupt(\"return\", this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer));\n\n              case 2:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function downloadAsXLSX() {\n        return _downloadAsXLSX.apply(this, arguments);\n      }\n\n      return downloadAsXLSX;\n    }()\n  }, {\n    key: \"downloadAsODS\",\n    value: function () {\n      var _downloadAsODS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var returnStreamInsteadOfBuffer,\n            _args24 = arguments;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                returnStreamInsteadOfBuffer = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : false;\n                return _context24.abrupt(\"return\", this._downloadAs('ods', null, returnStreamInsteadOfBuffer));\n\n              case 2:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function downloadAsODS() {\n        return _downloadAsODS.apply(this, arguments);\n      }\n\n      return downloadAsODS;\n    }()\n  }]);\n\n  return GoogleSpreadsheet;\n}();\n\nmodule.exports = GoogleSpreadsheet;","map":{"version":3,"names":["_","require","JWT","Axios","GoogleSpreadsheetWorksheet","getFieldMask","GOOGLE_AUTH_SCOPES","AUTH_MODES","API_KEY","RAW_ACCESS_TOKEN","OAUTH","GoogleSpreadsheet","sheetId","spreadsheetId","authMode","_rawSheets","_rawProperties","_spreadsheetUrl","axios","create","baseURL","paramsSerializer","params","options","keys","forEach","key","isParamTypeObject","isParamTypeArray","length","encodeURIComponent","each","val","slice","interceptors","request","use","_setAxiosRequestAuth","bind","response","_handleAxiosResponse","_handleAxiosErrors","properties","Error","post","url","data","defaults","sheets","s","_updateOrCreateSheet","apiKey","token","accessToken","oAuth2Client","creds","impersonateAs","jwtClient","email","client_email","private_key","scopes","subject","renewJwtAuth","authorize","config","headers","Authorization","credentials","access_token","getAccessToken","error","code","message","get","requestType","requestParams","requests","includeSpreadsheetInResponse","_updateRawProperties","updatedSpreadsheet","replies","responseRanges","responseIncludeGridData","newProperties","_fillCellData","param","_ensureInfoLoaded","newVal","_getProp","_setProp","_makeSingleUpdateRequest","fields","includeCells","includeGridData","spreadsheetUrl","loadInfo","values","sortBy","keyBy","omit","newSheetId","newSheet","sheetsById","headerValues","setHeaderRow","headerRowIndex","addSheet","name","range","namedRangeId","filters","readOnlyMode","filtersArray","isArray","dataFilters","map","filter","isString","a1Range","isObject","gridRange","ranges","result","sheet","fileType","worksheetId","returnStreamInsteadOfBuffer","includes","undefined","exportUrl","replace","baseUrl","id","format","gid","responseType","_downloadAs","module","exports"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/google-spreadsheet/lib/GoogleSpreadsheet.js"],"sourcesContent":["const _ = require('lodash');\nconst { JWT } = require('google-auth-library');\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst { getFieldMask } = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = [\n  'https://www.googleapis.com/auth/spreadsheets',\n\n  // the list from the sheets v4 auth for spreadsheets.get\n  // 'https://www.googleapis.com/auth/drive',\n  // 'https://www.googleapis.com/auth/drive.readonly',\n  // 'https://www.googleapis.com/auth/drive.file',\n  // 'https://www.googleapis.com/auth/spreadsheets',\n  // 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\n\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH',\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId || ''}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach((key) => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], (val) => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      },\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(\n      this._handleAxiosResponse.bind(this),\n      this._handleAxiosErrors.bind(this)\n    );\n\n    return this;\n  }\n\n  // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n  async createNewSpreadsheetDocument(properties) {\n    // see updateProperties for more info about available properties\n\n    if (this.spreadsheetId) {\n      throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n    }\n    const response = await this.axios.post(this.url, {\n      properties,\n    });\n    this.spreadsheetId = response.data.spreadsheetId;\n    this.axios.defaults.baseURL += this.spreadsheetId;\n\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  async useOAuth2Client(oAuth2Client) {\n    this.authMode = AUTH_MODES.OAUTH;\n    this.oAuth2Client = oAuth2Client;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs,\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else if (this.authMode === AUTH_MODES.OAUTH) {\n      const credentials = await this.oAuth2Client.getAccessToken();\n      config.headers.Authorization = `Bearer ${credentials.token}`;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n\n  async _handleAxiosResponse(response) { return response; }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n\n      const { code, message } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{ [requestType]: requestParams }],\n      includeSpreadsheetInResponse: true,\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...responseRanges && {\n        responseIncludeGridData: true,\n        ...responseRanges !== '*' && { responseRanges },\n      },\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) { this._rawProperties = newProperties; }\n\n  _updateOrCreateSheet({ properties, data }) {\n    const { sheetId } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, { properties, data });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() { return this._getProp('title'); }\n  get locale() { return this._getProp('locale'); }\n  get timeZone() { return this._getProp('timeZone'); }\n  get autoRecalc() { return this._getProp('autoRecalc'); }\n  get defaultFormat() { return this._getProp('defaultFormat'); }\n  get spreadsheetTheme() { return this._getProp('spreadsheetTheme'); }\n  get iterativeCalculationSettings() { return this._getProp('iterativeCalculationSettings'); }\n\n  set title(newVal) { this._setProp('title', newVal); }\n  set locale(newVal) { this._setProp('locale', newVal); }\n  set timeZone(newVal) { this._setProp('timeZone', newVal); }\n  set autoRecalc(newVal) { this._setProp('autoRecalc', newVal); }\n  set defaultFormat(newVal) { this._setProp('defaultFormat', newVal); }\n  set spreadsheetTheme(newVal) { this._setProp('spreadsheetTheme', newVal); }\n  set iterativeCalculationSettings(newVal) { this._setProp('iterativeCalculationSettings', newVal); }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...includeCells && { includeGridData: true },\n      },\n    });\n    this._spreadsheetUrl = response.data.spreadsheetUrl;\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n  async getInfo() { return this.loadInfo(); } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex'),\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    const headers = properties.headerValues || properties.headers;\n    if (headers) {\n      await newSheet.setHeaderRow(headers, properties.headerRowIndex);\n    }\n\n    return newSheet;\n  }\n  async addWorksheet(properties) { return this.addSheet(properties); } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', { sheetId });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId,\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', { namedRangeId });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, (filter) => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : { a1Range: filter };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return { gridRange: filter };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters,\n        },\n      });\n    // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters,\n      });\n    }\n\n    const { sheets } = result.data;\n    _.each(sheets, (sheet) => { this._updateOrCreateSheet(sheet); });\n  }\n\n  // EXPORTING /////////////////////////////////////////////////////////////\n  async _downloadAs(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n    // see https://stackoverflow.com/questions/11619805/using-the-google-drive-api-to-download-a-spreadsheet-in-csv-format/51235960#51235960\n\n    if (['html', 'xlsx', 'ods'].includes(fileType)) {\n      if (worksheetId) throw new Error(`Cannot specify worksheetId when exporting as ${fileType}`);\n    } else if (['csv', 'tsv', 'pdf'].includes(fileType)) {\n      if (worksheetId === undefined) throw new Error(`Must specify worksheetId when exporting as ${fileType}`);\n    } else {\n      throw new Error(`unsupported export fileType - ${fileType}`);\n    }\n\n    // google UI shows \"html\" but passes through \"zip\"\n    if (fileType === 'html') fileType = 'zip';\n\n    const exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n    const response = await this.axios.get(exportUrl, {\n      baseUrl: '', // unset baseUrl since we're not hitting the normal sheets API\n      params: {\n        id: this.spreadsheetId,\n        format: fileType,\n        ...worksheetId && { gid: worksheetId },\n      },\n      responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer',\n    });\n    return response.data;\n  }\n  async downloadAsHTML(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('html', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsXLSX(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsODS(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('ods', null, returnStreamInsteadOfBuffer);\n  }\n}\n\nmodule.exports = GoogleSpreadsheet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}