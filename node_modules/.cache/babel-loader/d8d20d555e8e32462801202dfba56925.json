{"ast":null,"code":"\"use strict\"; // Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthClient = void 0;\n\nvar events_1 = require(\"events\");\n\nvar transporters_1 = require(\"../transporters\");\n\nvar AuthClient = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(AuthClient, _events_1$EventEmitte);\n\n  var _super = _createSuper(AuthClient);\n\n  function AuthClient() {\n    var _this;\n\n    _classCallCheck(this, AuthClient);\n\n    _this = _super.apply(this, arguments);\n    _this.transporter = new transporters_1.DefaultTransporter();\n    _this.credentials = {};\n    return _this;\n  }\n  /**\n   * Sets the auth credentials.\n   */\n\n\n  _createClass(AuthClient, [{\n    key: \"setCredentials\",\n    value: function setCredentials(credentials) {\n      this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers objedcdt to append additional headers to.\n     */\n\n  }, {\n    key: \"addSharedMetadataHeaders\",\n    value: function addSharedMetadataHeaders(headers) {\n      // quota_project_id, stored in application_default_credentials.json, is set in\n      // the x-goog-user-project header, to indicate an alternate account for\n      // billing and quota:\n      if (!headers['x-goog-user-project'] && // don't override a value the user sets.\n      this.quotaProjectId) {\n        headers['x-goog-user-project'] = this.quotaProjectId;\n      }\n\n      return headers;\n    }\n  }]);\n\n  return AuthClient;\n}(events_1.EventEmitter);\n\nexports.AuthClient = AuthClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","AuthClient","events_1","require","transporters_1","arguments","transporter","DefaultTransporter","credentials","headers","quotaProjectId","EventEmitter"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/google-auth-library/build/src/auth/authclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthClient = void 0;\nconst events_1 = require(\"events\");\nconst transporters_1 = require(\"../transporters\");\nclass AuthClient extends events_1.EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.transporter = new transporters_1.DefaultTransporter();\n        this.credentials = {};\n    }\n    /**\n     * Sets the auth credentials.\n     */\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers objedcdt to append additional headers to.\n     */\n    addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers['x-goog-user-project'] && // don't override a value the user sets.\n            this.quotaProjectId) {\n            headers['x-goog-user-project'] = this.quotaProjectId;\n        }\n        return headers;\n    }\n}\nexports.AuthClient = AuthClient;\n//# sourceMappingURL=authclient.js.map"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,IAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;IACMF,U;;;;;EACF,sBAAc;IAAA;;IAAA;;IACV,2BAASI,SAAT;IACA,MAAKC,WAAL,GAAmB,IAAIF,cAAc,CAACG,kBAAnB,EAAnB;IACA,MAAKC,WAAL,GAAmB,EAAnB;IAHU;EAIb;EACD;AACJ;AACA;;;;;WACI,wBAAeA,WAAf,EAA4B;MACxB,KAAKA,WAAL,GAAmBA,WAAnB;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,kCAAyBC,OAAzB,EAAkC;MAC9B;MACA;MACA;MACA,IAAI,CAACA,OAAO,CAAC,qBAAD,CAAR,IAAmC;MACnC,KAAKC,cADT,EACyB;QACrBD,OAAO,CAAC,qBAAD,CAAP,GAAiC,KAAKC,cAAtC;MACH;;MACD,OAAOD,OAAP;IACH;;;;EA7BoBP,QAAQ,CAACS,Y;;AA+BlCZ,OAAO,CAACE,UAAR,GAAqBA,UAArB"},"metadata":{},"sourceType":"script"}