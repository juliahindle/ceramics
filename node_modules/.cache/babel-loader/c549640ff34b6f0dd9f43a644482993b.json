{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.displayvideo_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar displayvideo_v2;\n\n(function (displayvideo_v2) {\n  /**\n   * Display &amp; Video 360 API\n   *\n   * Display &amp; Video 360 API allows users to automate complex Display &amp; Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const displayvideo = google.displayvideo('v2');\n   * ```\n   */\n  class Displayvideo {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.advertisers = new Resource$Advertisers(this.context);\n      this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n      this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n      this.customLists = new Resource$Customlists(this.context);\n      this.firstAndThirdPartyAudiences = new Resource$Firstandthirdpartyaudiences(this.context);\n      this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n      this.googleAudiences = new Resource$Googleaudiences(this.context);\n      this.guaranteedOrders = new Resource$Guaranteedorders(this.context);\n      this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n      this.inventorySources = new Resource$Inventorysources(this.context);\n      this.media = new Resource$Media(this.context);\n      this.partners = new Resource$Partners(this.context);\n      this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n      this.targetingTypes = new Resource$Targetingtypes(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n\n  }\n\n  displayvideo_v2.Displayvideo = Displayvideo;\n\n  class Resource$Advertisers {\n    constructor(context) {\n      this.context = context;\n      this.assets = new Resource$Advertisers$Assets(this.context);\n      this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n      this.channels = new Resource$Advertisers$Channels(this.context);\n      this.creatives = new Resource$Advertisers$Creatives(this.context);\n      this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n      this.invoices = new Resource$Advertisers$Invoices(this.context);\n      this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n      this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n      this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n      this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n      this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n    }\n\n    audit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers = Resource$Advertisers;\n\n  class Resource$Advertisers$Assets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n\n  class Resource$Advertisers$Campaigns {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Campaigns$Targetingtypes(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n\n  class Resource$Advertisers$Campaigns$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes = Resource$Advertisers$Campaigns$Targetingtypes;\n\n  class Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'campaignId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId', 'targetingType'],\n        pathParams: ['advertiserId', 'campaignId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Advertisers$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n\n  class Resource$Advertisers$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n\n  class Resource$Advertisers$Creatives {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n\n  class Resource$Advertisers$Insertionorders {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Insertionorders$Targetingtypes(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n\n  class Resource$Advertisers$Insertionorders$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes = Resource$Advertisers$Insertionorders$Targetingtypes;\n\n  class Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'insertionOrderId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n        pathParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Advertisers$Invoices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    lookupInvoiceCurrency(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices:lookupInvoiceCurrency').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Invoices = Resource$Advertisers$Invoices;\n\n  class Resource$Advertisers$Lineitems {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n    }\n\n    bulkEditAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkEditAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    bulkListAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkListAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    bulkUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertisersId}/lineItems:bulkUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertisersId'],\n        pathParams: ['advertisersId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    generateDefault(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:generateDefault').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n\n  class Resource$Advertisers$Lineitems$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n\n  class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Advertisers$Locationlists {\n    constructor(context) {\n      this.context = context;\n      this.assignedLocations = new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n\n  class Resource$Advertisers$Locationlists$Assignedlocations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId', 'assignedLocationId'],\n        pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n\n  class Resource$Advertisers$Manualtriggers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    activate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deactivate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n\n  class Resource$Advertisers$Negativekeywordlists {\n    constructor(context) {\n      this.context = context;\n      this.negativeKeywords = new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n\n  class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId', 'keywordValue'],\n        pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n\n  class Resource$Advertisers$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n\n  class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Combinedaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['combinedAudienceId'],\n        pathParams: ['combinedAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Combinedaudiences = Resource$Combinedaudiences;\n\n  class Resource$Custombiddingalgorithms {\n    constructor(context) {\n      this.context = context;\n      this.scripts = new Resource$Custombiddingalgorithms$Scripts(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    uploadScript(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}:uploadScript').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n\n  class Resource$Custombiddingalgorithms$Scripts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts/{+customBiddingScriptId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n        pathParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Custombiddingalgorithms$Scripts = Resource$Custombiddingalgorithms$Scripts;\n\n  class Resource$Customlists {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customListId'],\n        pathParams: ['customListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Customlists = Resource$Customlists;\n\n  class Resource$Firstandthirdpartyaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    editCustomerMatchMembers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}:editCustomerMatchMembers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firstAndThirdPartyAudienceId'],\n        pathParams: ['firstAndThirdPartyAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firstAndThirdPartyAudienceId'],\n        pathParams: ['firstAndThirdPartyAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['firstAndThirdPartyAudienceId'],\n        pathParams: ['firstAndThirdPartyAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Firstandthirdpartyaudiences = Resource$Firstandthirdpartyaudiences;\n\n  class Resource$Floodlightgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Floodlightgroups = Resource$Floodlightgroups;\n\n  class Resource$Googleaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['googleAudienceId'],\n        pathParams: ['googleAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Googleaudiences = Resource$Googleaudiences;\n\n  class Resource$Guaranteedorders {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    editGuaranteedOrderReadAccessors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}:editGuaranteedOrderReadAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Guaranteedorders = Resource$Guaranteedorders;\n\n  class Resource$Inventorysourcegroups {\n    constructor(context) {\n      this.context = context;\n      this.assignedInventorySources = new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n\n  class Resource$Inventorysourcegroups$Assignedinventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n        pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n\n  class Resource$Inventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    editInventorySourceReadWriteAccessors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}:editInventorySourceReadWriteAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Inventorysources = Resource$Inventorysources;\n\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Media = Resource$Media;\n\n  class Resource$Partners {\n    constructor(context) {\n      this.context = context;\n      this.channels = new Resource$Partners$Channels(this.context);\n      this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n    }\n\n    editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Partners = Resource$Partners;\n\n  class Resource$Partners$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Partners$Channels$Sites(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Partners$Channels = Resource$Partners$Channels;\n\n  class Resource$Partners$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n        pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n\n  class Resource$Partners$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v2.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n\n  class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Sdfdownloadtasks {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n\n  class Resource$Sdfdownloadtasks$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n\n  class Resource$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v2.Resource$Targetingtypes = Resource$Targetingtypes;\n\n  class Resource$Targetingtypes$Targetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['targetingType', 'targetingOptionId'],\n        pathParams: ['targetingOptionId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['targetingType'],\n        pathParams: ['targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions:search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['targetingType'],\n        pathParams: ['targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v2.Resource$Users = Resource$Users;\n})(displayvideo_v2 = exports.displayvideo_v2 || (exports.displayvideo_v2 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","displayvideo_v2","googleapis_common_1","require","Displayvideo","constructor","options","google","context","_options","advertisers","Resource$Advertisers","combinedAudiences","Resource$Combinedaudiences","customBiddingAlgorithms","Resource$Custombiddingalgorithms","customLists","Resource$Customlists","firstAndThirdPartyAudiences","Resource$Firstandthirdpartyaudiences","floodlightGroups","Resource$Floodlightgroups","googleAudiences","Resource$Googleaudiences","guaranteedOrders","Resource$Guaranteedorders","inventorySourceGroups","Resource$Inventorysourcegroups","inventorySources","Resource$Inventorysources","media","Resource$Media","partners","Resource$Partners","sdfdownloadtasks","Resource$Sdfdownloadtasks","targetingTypes","Resource$Targetingtypes","users","Resource$Users","assets","Resource$Advertisers$Assets","campaigns","Resource$Advertisers$Campaigns","channels","Resource$Advertisers$Channels","creatives","Resource$Advertisers$Creatives","insertionOrders","Resource$Advertisers$Insertionorders","invoices","Resource$Advertisers$Invoices","lineItems","Resource$Advertisers$Lineitems","locationLists","Resource$Advertisers$Locationlists","manualTriggers","Resource$Advertisers$Manualtriggers","negativeKeywordLists","Resource$Advertisers$Negativekeywordlists","Resource$Advertisers$Targetingtypes","audit","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","create","delete","editAssignedTargetingOptions","get","list","listAssignedTargetingOptions","patch","upload","mediaUrl","Resource$Advertisers$Campaigns$Targetingtypes","assignedTargetingOptions","Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions","sites","Resource$Advertisers$Channels$Sites","bulkEdit","Resource$Advertisers$Insertionorders$Targetingtypes","Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions","lookupInvoiceCurrency","Resource$Advertisers$Lineitems$Targetingtypes","bulkEditAssignedTargetingOptions","bulkListAssignedTargetingOptions","bulkUpdate","generateDefault","Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions","assignedLocations","Resource$Advertisers$Locationlists$Assignedlocations","activate","deactivate","negativeKeywords","Resource$Advertisers$Negativekeywordlists$Negativekeywords","Resource$Advertisers$Targetingtypes$Assignedtargetingoptions","scripts","Resource$Custombiddingalgorithms$Scripts","uploadScript","editCustomerMatchMembers","editGuaranteedOrderReadAccessors","assignedInventorySources","Resource$Inventorysourcegroups$Assignedinventorysources","editInventorySourceReadWriteAccessors","download","Resource$Partners$Channels","Resource$Partners$Targetingtypes","Resource$Partners$Channels$Sites","Resource$Partners$Targetingtypes$Assignedtargetingoptions","operations","Resource$Sdfdownloadtasks$Operations","targetingOptions","Resource$Targetingtypes$Targetingoptions","search","bulkEditAssignedUserRoles"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/googleapis/build/src/apis/displayvideo/v2.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.displayvideo_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar displayvideo_v2;\n(function (displayvideo_v2) {\n    /**\n     * Display &amp; Video 360 API\n     *\n     * Display &amp; Video 360 API allows users to automate complex Display &amp; Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const displayvideo = google.displayvideo('v2');\n     * ```\n     */\n    class Displayvideo {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.advertisers = new Resource$Advertisers(this.context);\n            this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n            this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n            this.customLists = new Resource$Customlists(this.context);\n            this.firstAndThirdPartyAudiences =\n                new Resource$Firstandthirdpartyaudiences(this.context);\n            this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n            this.googleAudiences = new Resource$Googleaudiences(this.context);\n            this.guaranteedOrders = new Resource$Guaranteedorders(this.context);\n            this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n            this.inventorySources = new Resource$Inventorysources(this.context);\n            this.media = new Resource$Media(this.context);\n            this.partners = new Resource$Partners(this.context);\n            this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n            this.targetingTypes = new Resource$Targetingtypes(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    displayvideo_v2.Displayvideo = Displayvideo;\n    class Resource$Advertisers {\n        constructor(context) {\n            this.context = context;\n            this.assets = new Resource$Advertisers$Assets(this.context);\n            this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n            this.channels = new Resource$Advertisers$Channels(this.context);\n            this.creatives = new Resource$Advertisers$Creatives(this.context);\n            this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n            this.invoices = new Resource$Advertisers$Invoices(this.context);\n            this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n            this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n            this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n            this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n            this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n        }\n        audit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers = Resource$Advertisers;\n    class Resource$Advertisers$Assets {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n    class Resource$Advertisers$Campaigns {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes = new Resource$Advertisers$Campaigns$Targetingtypes(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n    class Resource$Advertisers$Campaigns$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes = Resource$Advertisers$Campaigns$Targetingtypes;\n    class Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'campaignId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'campaignId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId', 'targetingType'],\n                pathParams: ['advertiserId', 'campaignId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n    class Resource$Advertisers$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n    class Resource$Advertisers$Creatives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n    class Resource$Advertisers$Insertionorders {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes =\n                new Resource$Advertisers$Insertionorders$Targetingtypes(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n    class Resource$Advertisers$Insertionorders$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes = Resource$Advertisers$Insertionorders$Targetingtypes;\n    class Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'insertionOrderId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'insertionOrderId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n                pathParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Invoices {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        lookupInvoiceCurrency(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/invoices:lookupInvoiceCurrency').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Invoices = Resource$Advertisers$Invoices;\n    class Resource$Advertisers$Lineitems {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n        }\n        bulkEditAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:bulkEditAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkListAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:bulkListAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{advertisersId}/lineItems:bulkUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertisersId'],\n                pathParams: ['advertisersId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateDefault(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:generateDefault').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n    class Resource$Advertisers$Lineitems$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n    class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Locationlists {\n        constructor(context) {\n            this.context = context;\n            this.assignedLocations =\n                new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n    class Resource$Advertisers$Locationlists$Assignedlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'locationListId',\n                    'assignedLocationId',\n                ],\n                pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n    class Resource$Advertisers$Manualtriggers {\n        constructor(context) {\n            this.context = context;\n        }\n        activate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deactivate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n    class Resource$Advertisers$Negativekeywordlists {\n        constructor(context) {\n            this.context = context;\n            this.negativeKeywords =\n                new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n    class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'negativeKeywordListId',\n                    'keywordValue',\n                ],\n                pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n    class Resource$Advertisers$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n    class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Combinedaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['combinedAudienceId'],\n                pathParams: ['combinedAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Combinedaudiences = Resource$Combinedaudiences;\n    class Resource$Custombiddingalgorithms {\n        constructor(context) {\n            this.context = context;\n            this.scripts = new Resource$Custombiddingalgorithms$Scripts(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        uploadScript(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}:uploadScript').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n    class Resource$Custombiddingalgorithms$Scripts {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts/{+customBiddingScriptId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n                pathParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Custombiddingalgorithms$Scripts = Resource$Custombiddingalgorithms$Scripts;\n    class Resource$Customlists {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customListId'],\n                pathParams: ['customListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Customlists = Resource$Customlists;\n    class Resource$Firstandthirdpartyaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editCustomerMatchMembers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}:editCustomerMatchMembers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firstAndThirdPartyAudienceId'],\n                pathParams: ['firstAndThirdPartyAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firstAndThirdPartyAudienceId'],\n                pathParams: ['firstAndThirdPartyAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['firstAndThirdPartyAudienceId'],\n                pathParams: ['firstAndThirdPartyAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Firstandthirdpartyaudiences = Resource$Firstandthirdpartyaudiences;\n    class Resource$Floodlightgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Floodlightgroups = Resource$Floodlightgroups;\n    class Resource$Googleaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['googleAudienceId'],\n                pathParams: ['googleAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Googleaudiences = Resource$Googleaudiences;\n    class Resource$Guaranteedorders {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editGuaranteedOrderReadAccessors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/guaranteedOrders/{+guaranteedOrderId}:editGuaranteedOrderReadAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Guaranteedorders = Resource$Guaranteedorders;\n    class Resource$Inventorysourcegroups {\n        constructor(context) {\n            this.context = context;\n            this.assignedInventorySources =\n                new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n    class Resource$Inventorysourcegroups$Assignedinventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n                pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n    class Resource$Inventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editInventorySourceReadWriteAccessors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySources/{+inventorySourceId}:editInventorySourceReadWriteAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysources = Resource$Inventorysources;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Media = Resource$Media;\n    class Resource$Partners {\n        constructor(context) {\n            this.context = context;\n            this.channels = new Resource$Partners$Channels(this.context);\n            this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n        }\n        editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners = Resource$Partners;\n    class Resource$Partners$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Partners$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Channels = Resource$Partners$Channels;\n    class Resource$Partners$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n                pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n    class Resource$Partners$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n    class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Sdfdownloadtasks {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n    class Resource$Sdfdownloadtasks$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n    class Resource$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Targetingtypes = Resource$Targetingtypes;\n    class Resource$Targetingtypes$Targetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['targetingType', 'targetingOptionId'],\n                pathParams: ['targetingOptionId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['targetingType'],\n                pathParams: ['targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/targetingTypes/{+targetingType}/targetingOptions:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['targetingType'],\n                pathParams: ['targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Users = Resource$Users;\n})(displayvideo_v2 = exports.displayvideo_v2 || (exports.displayvideo_v2 = {}));\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,IAAIF,eAAJ;;AACA,CAAC,UAAUA,eAAV,EAA2B;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,YAAN,CAAmB;IACfC,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;MACzB,KAAKC,OAAL,GAAe;QACXC,QAAQ,EAAEH,OAAO,IAAI,EADV;QAEXC;MAFW,CAAf;MAIA,KAAKG,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAKH,OAA9B,CAAnB;MACA,KAAKI,iBAAL,GAAyB,IAAIC,0BAAJ,CAA+B,KAAKL,OAApC,CAAzB;MACA,KAAKM,uBAAL,GAA+B,IAAIC,gCAAJ,CAAqC,KAAKP,OAA1C,CAA/B;MACA,KAAKQ,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAKT,OAA9B,CAAnB;MACA,KAAKU,2BAAL,GACI,IAAIC,oCAAJ,CAAyC,KAAKX,OAA9C,CADJ;MAEA,KAAKY,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAKb,OAAnC,CAAxB;MACA,KAAKc,eAAL,GAAuB,IAAIC,wBAAJ,CAA6B,KAAKf,OAAlC,CAAvB;MACA,KAAKgB,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAKjB,OAAnC,CAAxB;MACA,KAAKkB,qBAAL,GAA6B,IAAIC,8BAAJ,CAAmC,KAAKnB,OAAxC,CAA7B;MACA,KAAKoB,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAKrB,OAAnC,CAAxB;MACA,KAAKsB,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAKvB,OAAxB,CAAb;MACA,KAAKwB,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKzB,OAA3B,CAAhB;MACA,KAAK0B,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAK3B,OAAnC,CAAxB;MACA,KAAK4B,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAK7B,OAAjC,CAAtB;MACA,KAAK8B,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAK/B,OAAxB,CAAb;IACH;;EAtBc;;EAwBnBP,eAAe,CAACG,YAAhB,GAA+BA,YAA/B;;EACA,MAAMO,oBAAN,CAA2B;IACvBN,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKgC,MAAL,GAAc,IAAIC,2BAAJ,CAAgC,KAAKjC,OAArC,CAAd;MACA,KAAKkC,SAAL,GAAiB,IAAIC,8BAAJ,CAAmC,KAAKnC,OAAxC,CAAjB;MACA,KAAKoC,QAAL,GAAgB,IAAIC,6BAAJ,CAAkC,KAAKrC,OAAvC,CAAhB;MACA,KAAKsC,SAAL,GAAiB,IAAIC,8BAAJ,CAAmC,KAAKvC,OAAxC,CAAjB;MACA,KAAKwC,eAAL,GAAuB,IAAIC,oCAAJ,CAAyC,KAAKzC,OAA9C,CAAvB;MACA,KAAK0C,QAAL,GAAgB,IAAIC,6BAAJ,CAAkC,KAAK3C,OAAvC,CAAhB;MACA,KAAK4C,SAAL,GAAiB,IAAIC,8BAAJ,CAAmC,KAAK7C,OAAxC,CAAjB;MACA,KAAK8C,aAAL,GAAqB,IAAIC,kCAAJ,CAAuC,KAAK/C,OAA5C,CAArB;MACA,KAAKgD,cAAL,GAAsB,IAAIC,mCAAJ,CAAwC,KAAKjD,OAA7C,CAAtB;MACA,KAAKkD,oBAAL,GAA4B,IAAIC,yCAAJ,CAA8C,KAAKnD,OAAnD,CAA5B;MACA,KAAK4B,cAAL,GAAsB,IAAIwB,mCAAJ,CAAwC,KAAKpD,OAA7C,CAAtB;IACH;;IACDqD,KAAK,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,uCAAX,EAAoDI,OAApD,CAA4D,cAA5D,EAA4E,IAA5E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAX,EAA8BI,OAA9B,CAAsC,cAAtC,EAAsD,IAAtD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDU,4BAA4B,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAC+DI,OAD/D,CACuE,cADvE,EACuF,IADvF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAX,EAA8BI,OAA9B,CAAsC,cAAtC,EAAsD,IAAtD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDa,4BAA4B,CAAClB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAC+DI,OAD/D,CACuE,cADvE,EACuF,IADvF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAtQsB;;EAwQ3BlE,eAAe,CAACU,oBAAhB,GAAuCA,oBAAvC;;EACA,MAAM8B,2BAAN,CAAkC;IAC9BpC,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACD0E,MAAM,CAACpB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAX,EAAqDI,OAArD,CAA6D,cAA7D,EAA6E,IAA7E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfkB,QAAQ,EAAE,CAACjB,OAAO,GAAG,+CAAX,EAA4DI,OAA5D,CAAoE,cAApE,EAAoF,IAApF,CANK;QAOfE,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnC6B;;EAqClClE,eAAe,CAACwC,2BAAhB,GAA8CA,2BAA9C;;EACA,MAAME,8BAAN,CAAqC;IACjCtC,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK4B,cAAL,GAAsB,IAAIgD,6CAAJ,CAAkD,KAAK5E,OAAvD,CAAtB;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDa,4BAA4B,CAAClB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,sFADC,EACuFI,OADvF,CAC+F,cAD/F,EAC+G,IAD/G,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnMgC;;EAqMrClE,eAAe,CAAC0C,8BAAhB,GAAiDA,8BAAjD;;EACA,MAAMyC,6CAAN,CAAoD;IAChD/E,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK6E,wBAAL,GACI,IAAIC,sEAAJ,CAA2E,KAAK9E,OAAhF,CADJ;IAEH;;EAL+C;;EAOpDP,eAAe,CAACmF,6CAAhB,GAAgEA,6CAAhE;;EACA,MAAME,sEAAN,CAA6E;IACzEjF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+IADC,EACgJI,OADhJ,CACwJ,cADxJ,EACwK,IADxK,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,YAFY,EAGZ,eAHY,EAIZ,2BAJY,CAPD;QAafC,UAAU,EAAE,CACR,cADQ,EAER,2BAFQ,EAGR,YAHQ,EAIR,eAJQ,CAbG;QAmBfjE,OAAO,EAAE,KAAKA;MAnBC,CAAnB;;MAqBA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,kHADC,EACmHI,OADnH,CAC2H,cAD3H,EAC2I,IAD3I,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,EAA+B,eAA/B,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,EAA+B,eAA/B,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA/EwE;;EAiF7ElE,eAAe,CAACqF,sEAAhB,GAAyFA,sEAAzF;;EACA,MAAMzC,6BAAN,CAAoC;IAChCxC,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK+E,KAAL,GAAa,IAAIC,mCAAJ,CAAwC,KAAKhF,OAA7C,CAAb;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAAX,EAAuDI,OAAvD,CAA+D,cAA/D,EAA+E,IAA/E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,uDAAX,EAAoEI,OAApE,CAA4E,cAA5E,EAA4F,IAA5F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAAX,EAAuDI,OAAvD,CAA+D,cAA/D,EAA+E,IAA/E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sDAAX,EAAmEI,OAAnE,CAA2E,cAA3E,EAA2F,IAA3F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhI+B;;EAkIpClE,eAAe,CAAC4C,6BAAhB,GAAgDA,6BAAhD;;EACA,MAAM2C,mCAAN,CAA0C;IACtCnF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDiF,QAAQ,CAAC3B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EACsEI,OADtE,CAC8E,cAD9E,EAC8F,IAD9F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAC6DI,OAD7D,CACqE,cADrE,EACqF,IADrF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0EADC,EAC2EI,OAD3E,CACmF,cADnF,EACmG,IADnG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,EAA8B,YAA9B,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,EAA8B,YAA9B,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAC8DI,OAD9D,CACsE,cADtE,EACsF,IADtF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDG,OAAO,CAACR,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACnD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EACqEI,OADrE,CAC6E,cAD7E,EAC6F,IAD7F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnKqC;;EAqK1ClE,eAAe,CAACuF,mCAAhB,GAAsDA,mCAAtD;;EACA,MAAMzC,8BAAN,CAAqC;IACjC1C,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAjKgC;;EAmKrClE,eAAe,CAAC8C,8BAAhB,GAAiDA,8BAAjD;;EACA,MAAME,oCAAN,CAA2C;IACvC5C,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK4B,cAAL,GACI,IAAIsD,mDAAJ,CAAwD,KAAKlF,OAA7D,CADJ;IAEH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAX,EAA8DI,OAA9D,CAAsE,cAAtE,EAAsF,IAAtF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EACsEI,OADtE,CAC8E,cAD9E,EAC8F,IAD9F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EACsEI,OADtE,CAC8E,cAD9E,EAC8F,IAD9F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAX,EAA8DI,OAA9D,CAAsE,cAAtE,EAAsF,IAAtF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDa,4BAA4B,CAAClB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EACmGI,OADnG,CAC2G,cAD3G,EAC2H,IAD3H,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EACsEI,OADtE,CAC8E,cAD9E,EAC8F,IAD9F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,kBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EApMsC;;EAsM3ClE,eAAe,CAACgD,oCAAhB,GAAuDA,oCAAvD;;EACA,MAAMyC,mDAAN,CAA0D;IACtDrF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK6E,wBAAL,GACI,IAAIM,4EAAJ,CAAiF,KAAKnF,OAAtF,CADJ;IAEH;;EALqD;;EAO1DP,eAAe,CAACyF,mDAAhB,GAAsEA,mDAAtE;;EACA,MAAMC,4EAAN,CAAmF;IAC/EtF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,2JADC,EAC4JI,OAD5J,CACoK,cADpK,EACoL,IADpL,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,kBAFY,EAGZ,eAHY,EAIZ,2BAJY,CAPD;QAafC,UAAU,EAAE,CACR,cADQ,EAER,2BAFQ,EAGR,kBAHQ,EAIR,eAJQ,CAbG;QAmBfjE,OAAO,EAAE,KAAKA;MAnBC,CAAnB;;MAqBA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8HADC,EAC+HI,OAD/H,CACuI,cADvI,EACuJ,IADvJ,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,kBAAjB,EAAqC,eAArC,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,kBAAjB,EAAqC,eAArC,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA/E8E;;EAiFnFlE,eAAe,CAAC0F,4EAAhB,GAA+FA,4EAA/F;;EACA,MAAMxC,6BAAN,CAAoC;IAChC9C,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDuE,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAAX,EAAuDI,OAAvD,CAA+D,cAA/D,EAA+E,IAA/E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDyB,qBAAqB,CAAC9B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EACiEI,OADjE,CACyE,cADzE,EACyF,IADzF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnE+B;;EAqEpClE,eAAe,CAACkD,6BAAhB,GAAgDA,6BAAhD;;EACA,MAAME,8BAAN,CAAqC;IACjChD,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK4B,cAAL,GAAsB,IAAIyD,6CAAJ,CAAkD,KAAKrF,OAAvD,CAAtB;IACH;;IACDsF,gCAAgC,CAAChC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC5E,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4EADC,EAC6EI,OAD7E,CACqF,cADrF,EACqG,IADrG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACD4B,gCAAgC,CAACjC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC5E,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4EADC,EAC6EI,OAD7E,CACqF,cADrF,EACqG,IADrG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACD6B,UAAU,CAAClC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACtD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sDAAX,EAAmEI,OAAnE,CAA2E,cAA3E,EAA2F,IAA3F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,eAAD,CAND;QAOfC,UAAU,EAAE,CAAC,eAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACD8B,eAAe,CAACnC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,2DADC,EAC4DI,OAD5D,CACoE,cADpE,EACoF,IADpF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnSgC;;EAqSrClE,eAAe,CAACoD,8BAAhB,GAAiDA,8BAAjD;;EACA,MAAMwC,6CAAN,CAAoD;IAChDxF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK6E,wBAAL,GACI,IAAIa,sEAAJ,CAA2E,KAAK1F,OAAhF,CADJ;IAEH;;EAL+C;;EAOpDP,eAAe,CAAC4F,6CAAhB,GAAgEA,6CAAhE;;EACA,MAAMK,sEAAN,CAA6E;IACzE7F,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,kHADC,EACmHI,OADnH,CAC2H,cAD3H,EAC2I,IAD3I,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,EAA+B,eAA/B,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,EAA+B,eAA/B,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+IADC,EACgJI,OADhJ,CACwJ,cADxJ,EACwK,IADxK,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,YAFY,EAGZ,eAHY,EAIZ,2BAJY,CAPD;QAafC,UAAU,EAAE,CACR,cADQ,EAER,2BAFQ,EAGR,YAHQ,EAIR,eAJQ,CAbG;QAmBfjE,OAAO,EAAE,KAAKA;MAnBC,CAAnB;;MAqBA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+IADC,EACgJI,OADhJ,CACwJ,cADxJ,EACwK,IADxK,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,YAFY,EAGZ,eAHY,EAIZ,2BAJY,CAPD;QAafC,UAAU,EAAE,CACR,cADQ,EAER,2BAFQ,EAGR,YAHQ,EAIR,eAJQ,CAbG;QAmBfjE,OAAO,EAAE,KAAKA;MAnBC,CAAnB;;MAqBA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,kHADC,EACmHI,OADnH,CAC2H,cAD3H,EAC2I,IAD3I,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,YAAjB,EAA+B,eAA/B,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,YAAjB,EAA+B,eAA/B,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA3JwE;;EA6J7ElE,eAAe,CAACiG,sEAAhB,GAAyFA,sEAAzF;;EACA,MAAM3C,kCAAN,CAAyC;IACrClD,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK2F,iBAAL,GACI,IAAIC,oDAAJ,CAAyD,KAAK5F,OAA9D,CADJ;IAEH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAAX,EAA4DI,OAA5D,CAAoE,cAApE,EAAoF,IAApF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EACkEI,OADlE,CAC0E,cAD1E,EAC0F,IAD1F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAAX,EAA4DI,OAA5D,CAAoE,cAApE,EAAoF,IAApF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EACiEI,OADjE,CACyE,cADzE,EACyF,IADzF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnIoC;;EAqIzClE,eAAe,CAACsD,kCAAhB,GAAqDA,kCAArD;;EACA,MAAM6C,oDAAN,CAA2D;IACvD/F,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDiF,QAAQ,CAAC3B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,2FADC,EAC4FI,OAD5F,CACoG,cADpG,EACoH,IADpH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iFADC,EACkFI,OADlF,CAC0F,cAD1F,EAC0G,IAD1G,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uGADC,EACwGI,OADxG,CACgH,cADhH,EACgI,IADhI,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,gBAFY,EAGZ,oBAHY,CAPD;QAYfC,UAAU,EAAE,CAAC,cAAD,EAAiB,oBAAjB,EAAuC,gBAAvC,CAZG;QAafjE,OAAO,EAAE,KAAKA;MAbC,CAAnB;;MAeA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iFADC,EACkFI,OADlF,CAC0F,cAD1F,EAC0G,IAD1G,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA3IsD;;EA6I3DlE,eAAe,CAACmG,oDAAhB,GAAuEA,oDAAvE;;EACA,MAAM3C,mCAAN,CAA0C;IACtCpD,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACD6F,QAAQ,CAACvC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EACuEI,OADvE,CAC+E,cAD/E,EAC+F,IAD/F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gDAAX,EAA6DI,OAA7D,CAAqE,cAArE,EAAqF,IAArF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDmC,UAAU,CAACxC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACtD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,wEADC,EACyEI,OADzE,CACiF,cADjF,EACiG,IADjG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAC8DI,OAD9D,CACsE,cADtE,EACsF,IADtF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gDAAX,EAA6DI,OAA7D,CAAqE,cAArE,EAAqF,IAArF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAC8DI,OAD9D,CACsE,cADtE,EACsF,IADtF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAjMqC;;EAmM1ClE,eAAe,CAACwD,mCAAhB,GAAsDA,mCAAtD;;EACA,MAAME,yCAAN,CAAgD;IAC5CtD,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK+F,gBAAL,GACI,IAAIC,0DAAJ,CAA+D,KAAKhG,OAApE,CADJ;IAEH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sDAAX,EAAmEI,OAAnE,CAA2E,cAA3E,EAA2F,IAA3F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+EADC,EACgFI,OADhF,CACwF,cADxF,EACwG,IADxG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+EADC,EACgFI,OADhF,CACwF,cADxF,EACwG,IADxG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sDAAX,EAAmEI,OAAnE,CAA2E,cAA3E,EAA2F,IAA3F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8EADC,EAC+EI,OAD/E,CACuF,cADvF,EACuG,IADvG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnK2C;;EAqKhDlE,eAAe,CAAC0D,yCAAhB,GAA4DA,yCAA5D;;EACA,MAAM6C,0DAAN,CAAiE;IAC7DnG,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDiF,QAAQ,CAAC3B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,wGADC,EACyGI,OADzG,CACiH,cADjH,EACiI,IADjI,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+FADC,EACgGI,OADhG,CACwG,cADxG,EACwH,IADxH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+GADC,EACgHI,OADhH,CACwH,cADxH,EACwI,IADxI,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,uBAFY,EAGZ,cAHY,CAPD;QAYfC,UAAU,EAAE,CAAC,cAAD,EAAiB,cAAjB,EAAiC,uBAAjC,CAZG;QAafjE,OAAO,EAAE,KAAKA;MAbC,CAAnB;;MAeA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,gGADC,EACiGI,OADjG,CACyG,cADzG,EACyH,IADzH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDG,OAAO,CAACR,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACnD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uGADC,EACwGI,OADxG,CACgH,cADhH,EACgI,IADhI,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,uBAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA5K4D;;EA8KjElE,eAAe,CAACuG,0DAAhB,GAA6EA,0DAA7E;;EACA,MAAM5C,mCAAN,CAA0C;IACtCvD,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK6E,wBAAL,GACI,IAAIoB,4DAAJ,CAAiE,KAAKjG,OAAtE,CADJ;IAEH;;EALqC;;EAO1CP,eAAe,CAAC2D,mCAAhB,GAAsDA,mCAAtD;;EACA,MAAM6C,4DAAN,CAAmE;IAC/DpG,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0FADC,EAC2FI,OAD3F,CACmG,cADnG,EACmH,IADnH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,eAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,eAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uHADC,EACwHI,OADxH,CACgI,cADhI,EACgJ,IADhJ,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,eAFY,EAGZ,2BAHY,CAPD;QAYfC,UAAU,EAAE,CACR,cADQ,EAER,2BAFQ,EAGR,eAHQ,CAZG;QAiBfjE,OAAO,EAAE,KAAKA;MAjBC,CAAnB;;MAmBA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uHADC,EACwHI,OADxH,CACgI,cADhI,EACgJ,IADhJ,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,cADY,EAEZ,eAFY,EAGZ,2BAHY,CAPD;QAYfC,UAAU,EAAE,CACR,cADQ,EAER,2BAFQ,EAGR,eAHQ,CAZG;QAiBfjE,OAAO,EAAE,KAAKA;MAjBC,CAAnB;;MAmBA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0FADC,EAC2FI,OAD3F,CACmG,cADnG,EACmH,IADnH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,cAAD,EAAiB,eAAjB,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,EAAiB,eAAjB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAvJ8D;;EAyJnElE,eAAe,CAACwG,4DAAhB,GAA+EA,4DAA/E;;EACA,MAAM5F,0BAAN,CAAiC;IAC7BR,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6CAAX,EAA0DI,OAA1D,CAAkE,cAAlE,EAAkF,IAAlF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,oBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,oBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,uBAAX,EAAoCI,OAApC,CAA4C,cAA5C,EAA4D,IAA5D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAjE4B;;EAmEjClE,eAAe,CAACY,0BAAhB,GAA6CA,0BAA7C;;EACA,MAAME,gCAAN,CAAuC;IACnCV,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkG,OAAL,GAAe,IAAIC,wCAAJ,CAA6C,KAAKnG,OAAlD,CAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAAX,EAA0CI,OAA1C,CAAkD,cAAlD,EAAkE,IAAlE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,0BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,0BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAAX,EAA0CI,OAA1C,CAAkD,cAAlD,EAAkE,IAAlE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAC0DI,OAD1D,CACkE,cADlE,EACkF,IADlF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,0BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,0BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDyC,YAAY,CAAC9C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EACuEI,OADvE,CAC+E,cAD/E,EAC+F,IAD/F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,0BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,0BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlKkC;;EAoKvClE,eAAe,CAACc,gCAAhB,GAAmDA,gCAAnD;;EACA,MAAM4F,wCAAN,CAA+C;IAC3CtG,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EACkEI,OADlE,CAC0E,cAD1E,EAC0F,IAD1F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,0BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,0BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0FADC,EAC2FI,OAD3F,CACmG,cADnG,EACmH,IADnH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,0BAAD,EAA6B,uBAA7B,CAPD;QAQfC,UAAU,EAAE,CAAC,0BAAD,EAA6B,uBAA7B,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EACkEI,OADlE,CAC0E,cAD1E,EAC0F,IAD1F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,0BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,0BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnG0C;;EAqG/ClE,eAAe,CAAC0G,wCAAhB,GAA2DA,wCAA3D;;EACA,MAAM1F,oBAAN,CAA2B;IACvBZ,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAX,EAA8BI,OAA9B,CAAsC,cAAtC,EAAsD,IAAtD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA/DsB;;EAiE3BlE,eAAe,CAACgB,oBAAhB,GAAuCA,oBAAvC;;EACA,MAAME,oCAAN,CAA2C;IACvCd,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACD0C,wBAAwB,CAAC/C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0FADC,EAC2FI,OAD3F,CACmG,cADnG,EACmH,IADnH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,8BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,8BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EACkEI,OADlE,CAC0E,cAD1E,EAC0F,IAD1F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,8BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,8BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EACkEI,OADlE,CAC0E,cAD1E,EAC0F,IAD1F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,8BAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,8BAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlKsC;;EAoK3ClE,eAAe,CAACkB,oCAAhB,GAAuDA,oCAAvD;;EACA,MAAME,yBAAN,CAAgC;IAC5BhB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,mBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,mBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAAX,EAAuDI,OAAvD,CAA+D,cAA/D,EAA+E,IAA/E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,mBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,mBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAjE2B;;EAmEhClE,eAAe,CAACoB,yBAAhB,GAA4CA,yBAA5C;;EACA,MAAME,wBAAN,CAA+B;IAC3BlB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,yCAAX,EAAsDI,OAAtD,CAA8D,cAA9D,EAA8E,IAA9E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,kBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,kBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qBAAX,EAAkCI,OAAlC,CAA0C,cAA1C,EAA0D,IAA1D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAjE0B;;EAmE/BlE,eAAe,CAACsB,wBAAhB,GAA2CA,wBAA3C;;EACA,MAAME,yBAAN,CAAgC;IAC5BpB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACD2C,gCAAgC,CAAChD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC5E,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4EADC,EAC6EI,OAD7E,CACqF,cADrF,EACqG,IADrG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,mBAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,mBAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,mBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,mBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,mBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,mBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhK2B;;EAkKhClE,eAAe,CAACwB,yBAAhB,GAA4CA,yBAA5C;;EACA,MAAME,8BAAN,CAAqC;IACjCtB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKuG,wBAAL,GACI,IAAIC,uDAAJ,CAA4D,KAAKxG,OAAjE,CADJ;IAEH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAAX,EAAwCI,OAAxC,CAAgD,cAAhD,EAAgE,IAAhE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qDAAX,EAAkEI,OAAlE,CAA0E,cAA1E,EAA0F,IAA1F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,wBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,wBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qDAAX,EAAkEI,OAAlE,CAA0E,cAA1E,EAA0F,IAA1F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,wBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,wBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAAX,EAAwCI,OAAxC,CAAgD,cAAhD,EAAgE,IAAhE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oDAAX,EAAiEI,OAAjE,CAAyE,cAAzE,EAAyF,IAAzF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,wBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,wBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhKgC;;EAkKrClE,eAAe,CAAC0B,8BAAhB,GAAiDA,8BAAjD;;EACA,MAAMqF,uDAAN,CAA8D;IAC1D3G,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDiF,QAAQ,CAAC3B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uFADC,EACwFI,OADxF,CACgG,cADhG,EACgH,IADhH,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,wBAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,wBAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8EADC,EAC+EI,OAD/E,CACuF,cADvF,EACuG,IADvG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,wBAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,wBAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,2GADC,EAC4GI,OAD5G,CACoH,cADpH,EACoI,IADpI,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,wBAAD,EAA2B,2BAA3B,CAPD;QAQfC,UAAU,EAAE,CAAC,2BAAD,EAA8B,wBAA9B,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8EADC,EAC+EI,OAD/E,CACuF,cADvF,EACuG,IADvG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,wBAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,wBAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAvIyD;;EAyI9DlE,eAAe,CAAC+G,uDAAhB,GAA0EA,uDAA1E;;EACA,MAAMnF,yBAAN,CAAgC;IAC5BxB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACD8C,qCAAqC,CAACnD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjF,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iFADC,EACkFI,OADlF,CAC0F,cAD1F,EAC0G,IAD1G,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,mBAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,mBAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,mBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,mBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAAX,EAAwDI,OAAxD,CAAgE,cAAhE,EAAgF,IAAhF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,mBAAD,CAND;QAOfC,UAAU,EAAE,CAAC,mBAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhK2B;;EAkKhClE,eAAe,CAAC4B,yBAAhB,GAA4CA,yBAA5C;;EACA,MAAME,cAAN,CAAqB;IACjB1B,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACD0G,QAAQ,CAACpD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAAX,EAAwCI,OAAxC,CAAgD,cAAhD,EAAgE,IAAhE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,cAAD,CAND;QAOfC,UAAU,EAAE,CAAC,cAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDe,MAAM,CAACpB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wBAAX,EAAqCI,OAArC,CAA6C,cAA7C,EAA6D,IAA7D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfkB,QAAQ,EAAE,CAACjB,OAAO,GAAG,+BAAX,EAA4CI,OAA5C,CAAoD,cAApD,EAAoE,IAApE,CANK;QAOfE,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhEgB;;EAkErBlE,eAAe,CAAC8B,cAAhB,GAAiCA,cAAjC;;EACA,MAAME,iBAAN,CAAwB;IACpB5B,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKoC,QAAL,GAAgB,IAAIuE,0BAAJ,CAA+B,KAAK3G,OAApC,CAAhB;MACA,KAAK4B,cAAL,GAAsB,IAAIgF,gCAAJ,CAAqC,KAAK5G,OAA1C,CAAtB;IACH;;IACDqE,4BAA4B,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wDAAX,EAAqEI,OAArE,CAA6E,cAA7E,EAA6F,IAA7F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAAX,EAAwCI,OAAxC,CAAgD,cAAhD,EAAgE,IAAhE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,cAAX,EAA2BI,OAA3B,CAAmC,cAAnC,EAAmD,IAAnD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhGmB;;EAkGxBlE,eAAe,CAACgC,iBAAhB,GAAoCA,iBAApC;;EACA,MAAMkF,0BAAN,CAAiC;IAC7B9G,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK+E,KAAL,GAAa,IAAI8B,gCAAJ,CAAqC,KAAK7G,OAA1C,CAAb;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oCAAX,EAAiDI,OAAjD,CAAyD,cAAzD,EAAyE,IAAzE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAX,EAA8DI,OAA9D,CAAsE,cAAtE,EAAsF,IAAtF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oCAAX,EAAiDI,OAAjD,CAAyD,cAAzD,EAAyE,IAAzE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gDAAX,EAA6DI,OAA7D,CAAqE,cAArE,EAAqF,IAArF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhI4B;;EAkIjClE,eAAe,CAACkH,0BAAhB,GAA6CA,0BAA7C;;EACA,MAAME,gCAAN,CAAuC;IACnChH,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDiF,QAAQ,CAAC3B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+DADC,EACgEI,OADhE,CACwE,cADxE,EACwF,IADxF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CAPD;QAQfC,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sDAAX,EAAmEI,OAAnE,CAA2E,cAA3E,EAA2F,IAA3F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EACqEI,OADrE,CAC6E,cAD7E,EAC6F,IAD7F,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,YAA3B,CAPD;QAQfC,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,YAA3B,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,uDAAX,EAAoEI,OAApE,CAA4E,cAA5E,EAA4F,IAA5F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CAND;QAOfC,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDG,OAAO,CAACR,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACnD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAC+DI,OAD/D,CACuE,cADvE,EACuF,IADvF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CAPD;QAQfC,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAjKkC;;EAmKvClE,eAAe,CAACoH,gCAAhB,GAAmDA,gCAAnD;;EACA,MAAMD,gCAAN,CAAuC;IACnC/G,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK6E,wBAAL,GACI,IAAIiC,yDAAJ,CAA8D,KAAK9G,OAAnE,CADJ;IAEH;;EALkC;;EAOvCP,eAAe,CAACmH,gCAAhB,GAAmDA,gCAAnD;;EACA,MAAME,yDAAN,CAAgE;IAC5DjH,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,oFADC,EACqFI,OADrF,CAC6F,cAD7F,EAC6G,IAD7G,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,WAAD,EAAc,eAAd,CAPD;QAQfC,UAAU,EAAE,CAAC,WAAD,EAAc,eAAd,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iHADC,EACkHI,OADlH,CAC0H,cAD1H,EAC0I,IAD1I,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,WADY,EAEZ,eAFY,EAGZ,2BAHY,CAPD;QAYfC,UAAU,EAAE,CAAC,2BAAD,EAA8B,WAA9B,EAA2C,eAA3C,CAZG;QAafjE,OAAO,EAAE,KAAKA;MAbC,CAAnB;;MAeA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iHADC,EACkHI,OADlH,CAC0H,cAD1H,EAC0I,IAD1I,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CACZ,WADY,EAEZ,eAFY,EAGZ,2BAHY,CAPD;QAYfC,UAAU,EAAE,CAAC,2BAAD,EAA8B,WAA9B,EAA2C,eAA3C,CAZG;QAafjE,OAAO,EAAE,KAAKA;MAbC,CAAnB;;MAeA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,oFADC,EACqFI,OADrF,CAC6F,cAD7F,EAC6G,IAD7G,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,WAAD,EAAc,eAAd,CAPD;QAQfC,UAAU,EAAE,CAAC,WAAD,EAAc,eAAd,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA/I2D;;EAiJhElE,eAAe,CAACqH,yDAAhB,GAA4EA,yDAA5E;;EACA,MAAMnF,yBAAN,CAAgC;IAC5B9B,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK+G,UAAL,GAAkB,IAAIC,oCAAJ,CAAyC,KAAKhH,OAA9C,CAAlB;IACH;;IACDmE,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnC2B;;EAqChClE,eAAe,CAACkC,yBAAhB,GAA4CA,yBAA5C;;EACA,MAAMqF,oCAAN,CAA2C;IACvCnH,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,aAAX,EAA0BI,OAA1B,CAAkC,cAAlC,EAAkD,IAAlD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCsC;;EAoC3ClE,eAAe,CAACuH,oCAAhB,GAAuDA,oCAAvD;;EACA,MAAMnF,uBAAN,CAA8B;IAC1BhC,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKiH,gBAAL,GAAwB,IAAIC,wCAAJ,CAA6C,KAAKlH,OAAlD,CAAxB;IACH;;EAJyB;;EAM9BP,eAAe,CAACoC,uBAAhB,GAA0CA,uBAA1C;;EACA,MAAMqF,wCAAN,CAA+C;IAC3CrH,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,2EADC,EAC4EI,OAD5E,CACoF,cADpF,EACoG,IADpG,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,eAAD,EAAkB,mBAAlB,CAPD;QAQfC,UAAU,EAAE,CAAC,mBAAD,EAAsB,eAAtB,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sDAAX,EAAmEI,OAAnE,CAA2E,cAA3E,EAA2F,IAA3F,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,eAAD,CAND;QAOfC,UAAU,EAAE,CAAC,eAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDwD,MAAM,CAAC7D,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAC8DI,OAD9D,CACsE,cADtE,EACsF,IADtF,CADc;UAGnBC,MAAM,EAAE;QAHW,CAAd,EAINjE,OAJM,CADM;QAMf2D,MANe;QAOfO,cAAc,EAAE,CAAC,eAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,eAAD,CARG;QASfjE,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlG0C;;EAoG/ClE,eAAe,CAACyH,wCAAhB,GAA2DA,wCAA3D;;EACA,MAAMnF,cAAN,CAAqB;IACjBlC,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDoH,yBAAyB,CAAC9D,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACrE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAAX,EAA4DI,OAA5D,CAAoE,cAApE,EAAoF,IAApF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,QAAD,CAND;QAOfC,UAAU,EAAE,CAAC,QAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,MAAM,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,WAAX,EAAwBI,OAAxB,CAAgC,cAAhC,EAAgD,IAAhD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,MAAM,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qBAAX,EAAkCI,OAAlC,CAA0C,cAA1C,EAA0D,IAA1D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,QAAD,CAND;QAOfC,UAAU,EAAE,CAAC,QAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDW,GAAG,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qBAAX,EAAkCI,OAAlC,CAA0C,cAA1C,EAA0D,IAA1D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,QAAD,CAND;QAOfC,UAAU,EAAE,CAAC,QAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDY,IAAI,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,WAAX,EAAwBI,OAAxB,CAAgC,cAAhC,EAAgD,IAAhD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDc,KAAK,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAIxD,OAAO,GAAIyD,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACA3D,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAOyD,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACAzD,OAAO,GAAG,EAAV;MACH;;MACD,MAAM4D,OAAO,GAAG5D,OAAO,CAAC4D,OAAR,IAAmB,sCAAnC;MACA,MAAMC,UAAU,GAAG;QACf7D,OAAO,EAAET,MAAM,CAACuE,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qBAAX,EAAkCI,OAAlC,CAA0C,cAA1C,EAA0D,IAA1D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNjE,OAHM,CADM;QAKf2D,MALe;QAMfO,cAAc,EAAE,CAAC,QAAD,CAND;QAOfC,UAAU,EAAE,CAAC,QAAD,CAPG;QAQfjE,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAIwD,QAAJ,EAAc;QACV,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAG9D,mBAAmB,CAACwE,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAxLgB;;EA0LrBlE,eAAe,CAACsC,cAAhB,GAAiCA,cAAjC;AACH,CA7kKD,EA6kKGtC,eAAe,GAAGF,OAAO,CAACE,eAAR,KAA4BF,OAAO,CAACE,eAAR,GAA0B,EAAtD,CA7kKrB"},"metadata":{},"sourceType":"script"}