{"ast":null,"code":"var _defineProperty = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _objectSpread = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/juliahindle/Documents/GitHub/ceramics/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _ = require('lodash');\n\nvar _require = require('./utils'),\n    columnToLetter = _require.columnToLetter;\n\nvar _require2 = require('./errors'),\n    GoogleSpreadsheetFormulaError = _require2.GoogleSpreadsheetFormulaError;\n\nvar GoogleSpreadsheetCell = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheetCell(parentSheet, rowIndex, columnIndex, cellData) {\n    _classCallCheck(this, GoogleSpreadsheetCell);\n\n    this._sheet = parentSheet; // the parent GoogleSpreadsheetWorksheet instance\n\n    this._row = rowIndex;\n    this._column = columnIndex;\n\n    this._updateRawData(cellData);\n\n    return this;\n  } // newData can be undefined/null if the cell is totally empty and unformatted\n\n\n  _createClass(GoogleSpreadsheetCell, [{\n    key: \"_updateRawData\",\n    value: function _updateRawData() {\n      var newData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this._rawData = newData;\n      this._draftData = {}; // stuff to save\n\n      this._error = null;\n\n      if (_.get(this._rawData, 'effectiveValue.errorValue')) {\n        this._error = new GoogleSpreadsheetFormulaError(this._rawData.effectiveValue.errorValue);\n      }\n    } // CELL LOCATION/ADDRESS /////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"rowIndex\",\n    get: function get() {\n      return this._row;\n    }\n  }, {\n    key: \"columnIndex\",\n    get: function get() {\n      return this._column;\n    }\n  }, {\n    key: \"a1Column\",\n    get: function get() {\n      return columnToLetter(this._column + 1);\n    }\n  }, {\n    key: \"a1Row\",\n    get: function get() {\n      return this._row + 1;\n    } // a1 row numbers start at 1 instead of 0\n\n  }, {\n    key: \"a1Address\",\n    get: function get() {\n      return \"\".concat(this.a1Column).concat(this.a1Row);\n    } // CELL CONTENTS - VALUE/FORMULA/NOTES ///////////////////////////////////////////////////////////\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      // const typeKey = _.keys(this._rawData.effectiveValue)[0];\n      if (this._draftData.value !== undefined) throw new Error('Value has been changed');\n      if (this._error) return this._error;\n      if (!this._rawData.effectiveValue) return null;\n      return _.values(this._rawData.effectiveValue)[0];\n    },\n    set: function set(newValue) {\n      if (_.isBoolean(newValue)) {\n        this._draftData.valueType = 'boolValue';\n      } else if (_.isString(newValue)) {\n        if (newValue.substr(0, 1) === '=') this._draftData.valueType = 'formulaValue';else this._draftData.valueType = 'stringValue';\n      } else if (_.isFinite(newValue)) {\n        this._draftData.valueType = 'numberValue';\n      } else if (_.isNil(newValue)) {\n        // null or undefined\n        this._draftData.valueType = 'stringValue';\n        newValue = '';\n      } else {\n        throw new Error('Set value to boolean, string, or number');\n      }\n\n      this._draftData.value = newValue;\n    }\n  }, {\n    key: \"valueType\",\n    get: function get() {\n      // an error only happens with a formula\n      if (this._error) return 'errorValue';\n      if (!this._rawData.effectiveValue) return null;\n      return _.keys(this._rawData.effectiveValue)[0];\n    }\n  }, {\n    key: \"formattedValue\",\n    get: function get() {\n      return this._rawData.formattedValue || null;\n    },\n    set: function set(newVal) {\n      throw new Error('You cannot modify the formatted value directly');\n    }\n  }, {\n    key: \"formula\",\n    get: function get() {\n      return _.get(this._rawData, 'userEnteredValue.formulaValue', null);\n    },\n    set: function set(newValue) {\n      if (newValue.substr(0, 1) !== '=') throw new Error('formula must begin with \"=\"');\n      this.value = newValue; // use existing value setter\n    }\n  }, {\n    key: \"formulaError\",\n    get: function get() {\n      return this._error;\n    }\n  }, {\n    key: \"hyperlink\",\n    get: function get() {\n      if (this._draftData.value) throw new Error('Save cell to be able to read hyperlink');\n      return this._rawData.hyperlink;\n    },\n    set: function set(val) {\n      throw new Error('Do not set hyperlink directly. Instead set cell.formula, for example `cell.formula = \\'=HYPERLINK(\"http://google.com\", \"Google\")\\'`');\n    }\n  }, {\n    key: \"note\",\n    get: function get() {\n      return this._draftData.note !== undefined ? this._draftData.note : this._rawData.note;\n    },\n    set: function set(newVal) {\n      if (newVal === null || newVal === undefined) newVal = '';\n      if (!_.isString(newVal)) throw new Error('Note must be a string');\n      if (newVal === this._rawData.note) delete this._draftData.note;else this._draftData.note = newVal;\n    } // CELL FORMATTING ///////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"userEnteredFormat\",\n    get: function get() {\n      return this._rawData.userEnteredFormat;\n    },\n    set: function set(newVal) {\n      throw new Error('Do not modify directly, instead use format properties');\n    }\n  }, {\n    key: \"effectiveFormat\",\n    get: function get() {\n      return this._rawData.effectiveFormat;\n    },\n    set: function set(newVal) {\n      throw new Error('Read-only');\n    }\n  }, {\n    key: \"_getFormatParam\",\n    value: function _getFormatParam(param) {\n      // we freeze the object so users don't change nested props accidentally\n      // TODO: figure out something that would throw an error if you try to update it?\n      if (_.get(this._draftData, \"userEnteredFormat.\".concat(param))) {\n        throw new Error('User format is unsaved - save the cell to be able to read it again');\n      }\n\n      return Object.freeze(this._rawData.userEnteredFormat[param]);\n    }\n  }, {\n    key: \"_setFormatParam\",\n    value: function _setFormatParam(param, newVal) {\n      if (_.isEqual(newVal, _.get(this._rawData, \"userEnteredFormat.\".concat(param)))) {\n        _.unset(this._draftData, \"userEnteredFormat.\".concat(param));\n      } else {\n        _.set(this._draftData, \"userEnteredFormat.\".concat(param), newVal);\n\n        this._draftData.clearFormat = false;\n      }\n    } // format getters\n\n  }, {\n    key: \"numberFormat\",\n    get: function get() {\n      return this._getFormatParam('numberFormat');\n    },\n    set: // format setters\n    function set(newVal) {\n      return this._setFormatParam('numberFormat', newVal);\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      return this._getFormatParam('backgroundColor');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('backgroundColor', newVal);\n    }\n  }, {\n    key: \"borders\",\n    get: function get() {\n      return this._getFormatParam('borders');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('borders', newVal);\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this._getFormatParam('padding');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('padding', newVal);\n    }\n  }, {\n    key: \"horizontalAlignment\",\n    get: function get() {\n      return this._getFormatParam('horizontalAlignment');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('horizontalAlignment', newVal);\n    }\n  }, {\n    key: \"verticalAlignment\",\n    get: function get() {\n      return this._getFormatParam('verticalAlignment');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('verticalAlignment', newVal);\n    }\n  }, {\n    key: \"wrapStrategy\",\n    get: function get() {\n      return this._getFormatParam('wrapStrategy');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('wrapStrategy', newVal);\n    }\n  }, {\n    key: \"textDirection\",\n    get: function get() {\n      return this._getFormatParam('textDirection');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('textDirection', newVal);\n    }\n  }, {\n    key: \"textFormat\",\n    get: function get() {\n      return this._getFormatParam('textFormat');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('textFormat', newVal);\n    }\n  }, {\n    key: \"hyperlinkDisplayType\",\n    get: function get() {\n      return this._getFormatParam('hyperlinkDisplayType');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('hyperlinkDisplayType', newVal);\n    }\n  }, {\n    key: \"textRotation\",\n    get: function get() {\n      return this._getFormatParam('textRotation');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('textRotation', newVal);\n    }\n  }, {\n    key: \"clearAllFormatting\",\n    value: function clearAllFormatting() {\n      // need to track this separately since by setting/unsetting things, we may end up with\n      // this._draftData.userEnteredFormat as an empty object, but not an intent to clear it\n      this._draftData.clearFormat = true;\n      delete this._draftData.userEnteredFormat;\n    } // SAVING + UTILS ////////////////////////////////////////////////////////////////////////////////\n    // returns true if there are any updates that have not been saved yet\n\n  }, {\n    key: \"_isDirty\",\n    get: function get() {\n      // have to be careful about checking undefined rather than falsy\n      // in case a new value is empty string or 0 or false\n      if (this._draftData.note !== undefined) return true;\n      if (_.keys(this._draftData.userEnteredFormat).length) return true;\n      if (this._draftData.clearFormat) return true;\n      if (this._draftData.value !== undefined) return true;\n      return false;\n    }\n  }, {\n    key: \"discardUnsavedChanges\",\n    value: function discardUnsavedChanges() {\n      this._draftData = {};\n    }\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._sheet.saveUpdatedCells([this]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }() // used by worksheet when saving cells\n    // returns an individual batchUpdate request to update the cell\n\n  }, {\n    key: \"_getUpdateRequest\",\n    value: function _getUpdateRequest() {\n      // this logic should match the _isDirty logic above\n      // but we need it broken up to build the request below\n      var isValueUpdated = this._draftData.value !== undefined;\n      var isNoteUpdated = this._draftData.note !== undefined;\n      var isFormatUpdated = !!_.keys(this._draftData.userEnteredFormat || {}).length;\n      var isFormatCleared = this._draftData.clearFormat; // if no updates, we return null, which we can filter out later before sending requests\n\n      if (!_.some([isValueUpdated, isNoteUpdated, isFormatUpdated, isFormatCleared])) {\n        return null;\n      } // build up the formatting object, which has some quirks...\n\n\n      var format = _objectSpread(_objectSpread({}, this._rawData.userEnteredFormat), this._draftData.userEnteredFormat); // if background color already set, cell has backgroundColor and backgroundColorStyle\n      // but backgroundColorStyle takes precendence so we must remove to set the color\n      // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/cells#CellFormat\n\n\n      if (_.get(this._draftData, 'userEnteredFormat.backgroundColor')) {\n        delete format.backgroundColorStyle;\n      }\n\n      return {\n        updateCells: {\n          rows: [{\n            values: [_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, isValueUpdated && {\n              userEnteredValue: _defineProperty({}, this._draftData.valueType, this._draftData.value)\n            }), isNoteUpdated && {\n              note: this._draftData.note\n            }), isFormatUpdated && {\n              userEnteredFormat: format\n            }), isFormatCleared && {\n              userEnteredFormat: {}\n            })]\n          }],\n          // turns into a string of which fields to update ex \"note,userEnteredFormat\"\n          fields: _.keys(_.pickBy({\n            userEnteredValue: isValueUpdated,\n            note: isNoteUpdated,\n            userEnteredFormat: isFormatUpdated || isFormatCleared\n          })).join(','),\n          start: {\n            sheetId: this._sheet.sheetId,\n            rowIndex: this.rowIndex,\n            columnIndex: this.columnIndex\n          }\n        }\n      };\n    }\n  }]);\n\n  return GoogleSpreadsheetCell;\n}();\n\nmodule.exports = GoogleSpreadsheetCell;","map":{"version":3,"names":["_","require","columnToLetter","GoogleSpreadsheetFormulaError","GoogleSpreadsheetCell","parentSheet","rowIndex","columnIndex","cellData","_sheet","_row","_column","_updateRawData","newData","_rawData","_draftData","_error","get","effectiveValue","errorValue","a1Column","a1Row","value","undefined","Error","values","newValue","isBoolean","valueType","isString","substr","isFinite","isNil","keys","formattedValue","newVal","hyperlink","val","note","userEnteredFormat","effectiveFormat","param","Object","freeze","isEqual","unset","set","clearFormat","_getFormatParam","_setFormatParam","length","saveUpdatedCells","isValueUpdated","isNoteUpdated","isFormatUpdated","isFormatCleared","some","format","backgroundColorStyle","updateCells","rows","userEnteredValue","fields","pickBy","join","start","sheetId","module","exports"],"sources":["/Users/juliahindle/Documents/GitHub/ceramics/node_modules/google-spreadsheet/lib/GoogleSpreadsheetCell.js"],"sourcesContent":["const _ = require('lodash');\n\nconst { columnToLetter } = require('./utils');\n\nconst { GoogleSpreadsheetFormulaError } = require('./errors');\n\nclass GoogleSpreadsheetCell {\n  constructor(parentSheet, rowIndex, columnIndex, cellData) {\n    this._sheet = parentSheet; // the parent GoogleSpreadsheetWorksheet instance\n    this._row = rowIndex;\n    this._column = columnIndex;\n\n    this._updateRawData(cellData);\n    return this;\n  }\n\n  // newData can be undefined/null if the cell is totally empty and unformatted\n  _updateRawData(newData = {}) {\n    this._rawData = newData;\n    this._draftData = {}; // stuff to save\n    this._error = null;\n    if (_.get(this._rawData, 'effectiveValue.errorValue')) {\n      this._error = new GoogleSpreadsheetFormulaError(this._rawData.effectiveValue.errorValue);\n    }\n  }\n\n  // CELL LOCATION/ADDRESS /////////////////////////////////////////////////////////////////////////\n  get rowIndex() { return this._row; }\n  get columnIndex() { return this._column; }\n  get a1Column() { return columnToLetter(this._column + 1); }\n  get a1Row() { return this._row + 1; } // a1 row numbers start at 1 instead of 0\n  get a1Address() { return `${this.a1Column}${this.a1Row}`; }\n\n  // CELL CONTENTS - VALUE/FORMULA/NOTES ///////////////////////////////////////////////////////////\n  get value() {\n    // const typeKey = _.keys(this._rawData.effectiveValue)[0];\n    if (this._draftData.value !== undefined) throw new Error('Value has been changed');\n    if (this._error) return this._error;\n    if (!this._rawData.effectiveValue) return null;\n    return _.values(this._rawData.effectiveValue)[0];\n  }\n\n  set value(newValue) {\n    if (_.isBoolean(newValue)) {\n      this._draftData.valueType = 'boolValue';\n    } else if (_.isString(newValue)) {\n      if (newValue.substr(0, 1) === '=') this._draftData.valueType = 'formulaValue';\n      else this._draftData.valueType = 'stringValue';\n    } else if (_.isFinite(newValue)) {\n      this._draftData.valueType = 'numberValue';\n    } else if (_.isNil(newValue)) {\n      // null or undefined\n      this._draftData.valueType = 'stringValue';\n      newValue = '';\n    } else {\n      throw new Error('Set value to boolean, string, or number');\n    }\n    this._draftData.value = newValue;\n  }\n\n  get valueType() {\n    // an error only happens with a formula\n    if (this._error) return 'errorValue';\n    if (!this._rawData.effectiveValue) return null;\n    return _.keys(this._rawData.effectiveValue)[0];\n  }\n\n  get formattedValue() { return this._rawData.formattedValue || null; }\n  set formattedValue(newVal) {\n    throw new Error('You cannot modify the formatted value directly');\n  }\n\n  get formula() { return _.get(this._rawData, 'userEnteredValue.formulaValue', null); }\n  set formula(newValue) {\n    if (newValue.substr(0, 1) !== '=') throw new Error('formula must begin with \"=\"');\n    this.value = newValue; // use existing value setter\n  }\n  get formulaError() { return this._error; }\n\n  get hyperlink() {\n    if (this._draftData.value) throw new Error('Save cell to be able to read hyperlink');\n    return this._rawData.hyperlink;\n  }\n  set hyperlink(val) {\n    throw new Error('Do not set hyperlink directly. Instead set cell.formula, for example `cell.formula = \\'=HYPERLINK(\"http://google.com\", \"Google\")\\'`');\n  }\n\n  get note() {\n    return this._draftData.note !== undefined ? this._draftData.note : this._rawData.note;\n  }\n\n  set note(newVal) {\n    if (newVal === null || newVal === undefined) newVal = '';\n    if (!_.isString(newVal)) throw new Error('Note must be a string');\n    if (newVal === this._rawData.note) delete this._draftData.note;\n    else this._draftData.note = newVal;\n  }\n\n  // CELL FORMATTING ///////////////////////////////////////////////////////////////////////////////\n  get userEnteredFormat() { return this._rawData.userEnteredFormat; }\n  get effectiveFormat() { return this._rawData.effectiveFormat; }\n  set userEnteredFormat(newVal) { throw new Error('Do not modify directly, instead use format properties'); }\n  set effectiveFormat(newVal) { throw new Error('Read-only'); }\n\n  _getFormatParam(param) {\n    // we freeze the object so users don't change nested props accidentally\n    // TODO: figure out something that would throw an error if you try to update it?\n    if (_.get(this._draftData, `userEnteredFormat.${param}`)) {\n      throw new Error('User format is unsaved - save the cell to be able to read it again');\n    }\n    return Object.freeze(this._rawData.userEnteredFormat[param]);\n  }\n\n  _setFormatParam(param, newVal) {\n    if (_.isEqual(newVal, _.get(this._rawData, `userEnteredFormat.${param}`))) {\n      _.unset(this._draftData, `userEnteredFormat.${param}`);\n    } else {\n      _.set(this._draftData, `userEnteredFormat.${param}`, newVal);\n      this._draftData.clearFormat = false;\n    }\n  }\n\n  // format getters\n  get numberFormat() { return this._getFormatParam('numberFormat'); }\n  get backgroundColor() { return this._getFormatParam('backgroundColor'); }\n  get borders() { return this._getFormatParam('borders'); }\n  get padding() { return this._getFormatParam('padding'); }\n  get horizontalAlignment() { return this._getFormatParam('horizontalAlignment'); }\n  get verticalAlignment() { return this._getFormatParam('verticalAlignment'); }\n  get wrapStrategy() { return this._getFormatParam('wrapStrategy'); }\n  get textDirection() { return this._getFormatParam('textDirection'); }\n  get textFormat() { return this._getFormatParam('textFormat'); }\n  get hyperlinkDisplayType() { return this._getFormatParam('hyperlinkDisplayType'); }\n  get textRotation() { return this._getFormatParam('textRotation'); }\n\n  // format setters\n  set numberFormat(newVal) { return this._setFormatParam('numberFormat', newVal); }\n  set backgroundColor(newVal) { return this._setFormatParam('backgroundColor', newVal); }\n  set borders(newVal) { return this._setFormatParam('borders', newVal); }\n  set padding(newVal) { return this._setFormatParam('padding', newVal); }\n  set horizontalAlignment(newVal) { return this._setFormatParam('horizontalAlignment', newVal); }\n  set verticalAlignment(newVal) { return this._setFormatParam('verticalAlignment', newVal); }\n  set wrapStrategy(newVal) { return this._setFormatParam('wrapStrategy', newVal); }\n  set textDirection(newVal) { return this._setFormatParam('textDirection', newVal); }\n  set textFormat(newVal) { return this._setFormatParam('textFormat', newVal); }\n  set hyperlinkDisplayType(newVal) { return this._setFormatParam('hyperlinkDisplayType', newVal); }\n  set textRotation(newVal) { return this._setFormatParam('textRotation', newVal); }\n\n  clearAllFormatting() {\n    // need to track this separately since by setting/unsetting things, we may end up with\n    // this._draftData.userEnteredFormat as an empty object, but not an intent to clear it\n    this._draftData.clearFormat = true;\n    delete this._draftData.userEnteredFormat;\n  }\n\n  // SAVING + UTILS ////////////////////////////////////////////////////////////////////////////////\n\n  // returns true if there are any updates that have not been saved yet\n  get _isDirty() {\n    // have to be careful about checking undefined rather than falsy\n    // in case a new value is empty string or 0 or false\n    if (this._draftData.note !== undefined) return true;\n    if (_.keys(this._draftData.userEnteredFormat).length) return true;\n    if (this._draftData.clearFormat) return true;\n    if (this._draftData.value !== undefined) return true;\n    return false;\n  }\n\n  discardUnsavedChanges() {\n    this._draftData = {};\n  }\n\n  async save() {\n    await this._sheet.saveUpdatedCells([this]);\n  }\n\n  // used by worksheet when saving cells\n  // returns an individual batchUpdate request to update the cell\n  _getUpdateRequest() {\n    // this logic should match the _isDirty logic above\n    // but we need it broken up to build the request below\n    const isValueUpdated = this._draftData.value !== undefined;\n    const isNoteUpdated = this._draftData.note !== undefined;\n    const isFormatUpdated = !!_.keys(this._draftData.userEnteredFormat || {}).length;\n    const isFormatCleared = this._draftData.clearFormat;\n\n    // if no updates, we return null, which we can filter out later before sending requests\n    if (!_.some([isValueUpdated, isNoteUpdated, isFormatUpdated, isFormatCleared])) {\n      return null;\n    }\n\n    // build up the formatting object, which has some quirks...\n    const format = {\n      // have to pass the whole object or it will clear existing properties\n      ...this._rawData.userEnteredFormat,\n      ...this._draftData.userEnteredFormat,\n    };\n    // if background color already set, cell has backgroundColor and backgroundColorStyle\n    // but backgroundColorStyle takes precendence so we must remove to set the color\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/cells#CellFormat\n    if (_.get(this._draftData, 'userEnteredFormat.backgroundColor')) {\n      delete (format.backgroundColorStyle);\n    }\n\n    return {\n      updateCells: {\n        rows: [{\n          values: [{\n            ...isValueUpdated && {\n              userEnteredValue: { [this._draftData.valueType]: this._draftData.value },\n            },\n            ...isNoteUpdated && {\n              note: this._draftData.note,\n            },\n            ...isFormatUpdated && {\n              userEnteredFormat: format,\n            },\n            ...isFormatCleared && {\n              userEnteredFormat: {},\n            },\n          }],\n        }],\n        // turns into a string of which fields to update ex \"note,userEnteredFormat\"\n        fields: _.keys(_.pickBy({\n          userEnteredValue: isValueUpdated,\n          note: isNoteUpdated,\n          userEnteredFormat: isFormatUpdated || isFormatCleared,\n        })).join(','),\n        start: {\n          sheetId: this._sheet.sheetId,\n          rowIndex: this.rowIndex,\n          columnIndex: this.columnIndex,\n        },\n      },\n    };\n  }\n}\n\nmodule.exports = GoogleSpreadsheetCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}